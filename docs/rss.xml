<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ирокезнутый блог</title>
    <link>https://it-irokez.ru/rss.xml</link>
    <description>Recent content on Ирокезнутый блог</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Fri, 18 Nov 2022 21:38:00 +0300</lastBuildDate><atom:link href="https://it-irokez.ru/rss.xml" rel="self" type="application/rss+xml" />
    <item turbo="true">
      <title>Обзор книги &#34;Чистая Архитектура&#34; Р. Мартин</title>
      <link>https://it-irokez.ru/books_reviews/clear_architecture/</link>
      <pubDate>Fri, 18 Nov 2022 21:38:00 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/clear_architecture/</guid>
      <description>О чем книга? Книга посвящена, как следует из названия, вопросам построения чистой архитектуры и различных вопросов, лежащих в смежных областях. Отдельное внимание автор уделяет SOLID, тестируемости кода и месту тестов в архитектуре приложения. На фоне &amp;ldquo;чистого кода&amp;rdquo; книга выглядит гораздо менее категоричной и имеет достаточно примеров того, как чрезмерное увлечение &amp;ldquo;большим и правильным&amp;rdquo; способно погубить проект.
Что нашел полезным для себя?  Возможность изменений ценнее работоспособности. Приложение, которое легко изменять, почти всегда можно привести к рабочему состоянию, но работающее приложение, которое трудно изменять, после внесения изменений будет тяжело привести обратно в рабочее состояние; Принцип единой ответственности в большей степени относится к акторам, чем к функциональному назначению класса.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/clear_architect.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Книга посвящена, как следует из названия, вопросам построения чистой архитектуры и различных вопросов, лежащих в смежных областях. Отдельное внимание автор уделяет SOLID, тестируемости кода и месту тестов в архитектуре приложения. На фоне &amp;ldquo;чистого кода&amp;rdquo; книга выглядит гораздо менее категоричной и имеет достаточно примеров того, как чрезмерное увлечение &amp;ldquo;большим и правильным&amp;rdquo; способно погубить проект.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Возможность изменений ценнее работоспособности. Приложение, которое легко изменять, почти всегда можно привести к рабочему состоянию, но работающее приложение, которое трудно изменять, после внесения изменений будет тяжело привести обратно в рабочее состояние;&lt;/li&gt;
&lt;li&gt;Принцип единой ответственности в большей степени относится к акторам, чем к функциональному назначению класса. Т.е. имеется в виду не причина, по которой должен меняться класс, а источник этих изменений;&lt;/li&gt;
&lt;li&gt;Нашел любопытной мысль о том, что разделение интерфейсов (ISP) &amp;ndash; это проблема языка, а не архитектуры.&lt;/li&gt;
&lt;li&gt;Понравились определения:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Бизнес-правило&lt;/strong&gt; &amp;ndash; действие, приносящее или экономящее деньги, не зависимо от того, выполняется ли оно вручную или автоматизированной системой.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Вариант использования&lt;/strong&gt; &amp;ndash; описывает, как и когда вызываются бизнес-правила в рамках автоматизированной системы.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Службы независимы на уровне отдельных переменных, но они, по меньшей мере, связаны общими данными.&lt;/li&gt;
&lt;li&gt;Приведенный ниже фрагмент из книги также напомнил мне &lt;a href=&#34;https://habr.com/ru/post/312022/&#34;&gt;одну старую статью с Хабра&lt;/a&gt; &lt;img src=&#34;https://it-irokez.ru/assets/images/clear_architect2.jpg&#34; alt=&#34;забавный фрагмент из книги&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Архитекторам (кто бы мог подумать?);&lt;/li&gt;
&lt;li&gt;Старшим разработчикам, принимающим архитектурные решения (как касательно архитектуры кода, так и касательно архитектуры приложения).&lt;/li&gt;
&lt;li&gt;Младшим разработчикам, желающим понять, почему старшие коллеги требуют от них строить код именно так, как они требуют (или чтобы найти аргументы против того, чтобы так делать).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Тем, для кого &amp;ldquo;чистая архитектура&amp;rdquo; &amp;ndash; это фабрика фабрик.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Что такое дизайн и архитектура?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Цель?&lt;/li&gt;
&lt;li&gt;Пример из практики&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;История о двух ценностях&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Поведение&lt;/li&gt;
&lt;li&gt;Архитектура&lt;/li&gt;
&lt;li&gt;Наибольшая ценность&lt;/li&gt;
&lt;li&gt;Матрица Эйзенхауэра&lt;/li&gt;
&lt;li&gt;Битва за архитектуру&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Обзор парадигм&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Структурное программирование&lt;/li&gt;
&lt;li&gt;Объектно-ориентированное программирование&lt;/li&gt;
&lt;li&gt;Функциональное программирование&lt;/li&gt;
&lt;li&gt;Пища для ума&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Структурное программирование&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Доказательство&lt;/li&gt;
&lt;li&gt;Объявление вредным&lt;/li&gt;
&lt;li&gt;Функциональная декомпозиция&lt;/li&gt;
&lt;li&gt;Формальные доказательства отсутствуют&lt;/li&gt;
&lt;li&gt;Наука во спасение&lt;/li&gt;
&lt;li&gt;Тестирование&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Объектно- ориентированное программирование&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Инкапсуляция?&lt;/li&gt;
&lt;li&gt;Наследование?&lt;/li&gt;
&lt;li&gt;Полиморфизм?&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Функциональное программирование&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Квадраты целых чисел&lt;/li&gt;
&lt;li&gt;Неизменяемость и архитектура&lt;/li&gt;
&lt;li&gt;Ограничение изменяемости&lt;/li&gt;
&lt;li&gt;Регистрация событий&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип единственной ответственности&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Признак 1: непреднамеренное дублирование&lt;/li&gt;
&lt;li&gt;Признак 2: слияния&lt;/li&gt;
&lt;li&gt;Решения&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип открытости/закрытости&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Мысленный эксперимент&lt;/li&gt;
&lt;li&gt;Управление направлением&lt;/li&gt;
&lt;li&gt;Сокрытие информации&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип подстановки Барбары Лисков&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Руководство по использованию наследования&lt;/li&gt;
&lt;li&gt;Проблема квадрат/прямоугольник&lt;/li&gt;
&lt;li&gt;LSP и архитектура&lt;/li&gt;
&lt;li&gt;Пример нарушения LSP&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип разделения интерфейсов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Принцип разделения интерфейсов и язык&lt;/li&gt;
&lt;li&gt;Принцип разделения интерфейсов и архитектура&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип инверсии зависимости&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Стабильные абстракции&lt;/li&gt;
&lt;li&gt;Фабрики&lt;/li&gt;
&lt;li&gt;Конкретные компоненты&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Компоненты&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Краткая история компонентов&lt;/li&gt;
&lt;li&gt;Перемещаемость&lt;/li&gt;
&lt;li&gt;Компоновщики&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Связность компонентов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Принцип эквивалентности повторного использования и выпусков&lt;/li&gt;
&lt;li&gt;Принцип согласованного изменения&lt;/li&gt;
&lt;li&gt;Принцип совместного повторного использования&lt;/li&gt;
&lt;li&gt;Диаграмма противоречий для определения связности компонентов&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сочетаемость компонентов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Принцип ацикличности зависимостей&lt;/li&gt;
&lt;li&gt;Проектирование сверху вниз&lt;/li&gt;
&lt;li&gt;Принцип устойчивых зависимостей&lt;/li&gt;
&lt;li&gt;Принцип устойчивости абстракций&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что такое архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Разработка&lt;/li&gt;
&lt;li&gt;Развертывание&lt;/li&gt;
&lt;li&gt;Эффективность работы&lt;/li&gt;
&lt;li&gt;Сопровождение&lt;/li&gt;
&lt;li&gt;Сохранение разнообразия вариантов&lt;/li&gt;
&lt;li&gt;Независимость от устройства&lt;/li&gt;
&lt;li&gt;Нежелательная почта&lt;/li&gt;
&lt;li&gt;Физическая адресация&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Независимость&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Варианты использования&lt;/li&gt;
&lt;li&gt;Эффективность работы&lt;/li&gt;
&lt;li&gt;Разработка&lt;/li&gt;
&lt;li&gt;Развертывание&lt;/li&gt;
&lt;li&gt;Сохранение разнообразия вариантов&lt;/li&gt;
&lt;li&gt;Разделение уровней&lt;/li&gt;
&lt;li&gt;Разделение вариантов использования&lt;/li&gt;
&lt;li&gt;Режим разделения&lt;/li&gt;
&lt;li&gt;Возможность независимой разработки&lt;/li&gt;
&lt;li&gt;Возможность независимого развертывания&lt;/li&gt;
&lt;li&gt;Дублирование&lt;/li&gt;
&lt;li&gt;Режимы разделения (еще раз)&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Границы: проведение разделяющих линий&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Пара печальных историй&lt;/li&gt;
&lt;li&gt;FitNesse&lt;/li&gt;
&lt;li&gt;Какие границы проводить и когда?&lt;/li&gt;
&lt;li&gt;О вводе и выводе&lt;/li&gt;
&lt;li&gt;Архитектура с плагинами&lt;/li&gt;
&lt;li&gt;Аргумент в пользу плагинов&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Анатомия границ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Пересечение границ&lt;/li&gt;
&lt;li&gt;Ужасный монолит&lt;/li&gt;
&lt;li&gt;Компоненты развертывания&lt;/li&gt;
&lt;li&gt;Потоки выполнения&lt;/li&gt;
&lt;li&gt;Локальные процессы&lt;/li&gt;
&lt;li&gt;Службы&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Политика и уровень&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Уровень&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Бизнес-правила&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Сущности&lt;/li&gt;
&lt;li&gt;Варианты использования&lt;/li&gt;
&lt;li&gt;Модели запросов и ответов&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кричащая архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тема архитектуры&lt;/li&gt;
&lt;li&gt;Цель архитектуры&lt;/li&gt;
&lt;li&gt;А что насчет Веб?&lt;/li&gt;
&lt;li&gt;Фреймворки — это инструменты, а не образ жизни&lt;/li&gt;
&lt;li&gt;Тестируемые архитектуры&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чистая архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Правило зависимостей&lt;/li&gt;
&lt;li&gt;Типичный сценарий&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Презентаторы и скромные объекты&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Шаблон «Скромный объект»&lt;/li&gt;
&lt;li&gt;Презентаторы и представления&lt;/li&gt;
&lt;li&gt;Тестирование и архитектура&lt;/li&gt;
&lt;li&gt;Шлюзы к базам данных&lt;/li&gt;
&lt;li&gt;Преобразователи данных&lt;/li&gt;
&lt;li&gt;Службы&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Неполные границы&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Пропустить последний шаг&lt;/li&gt;
&lt;li&gt;Одномерные границы&lt;/li&gt;
&lt;li&gt;Фасады&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Уровни и границы&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Охота на Вампуса&lt;/li&gt;
&lt;li&gt;Чистая архитектура?&lt;/li&gt;
&lt;li&gt;Пересечение потоков&lt;/li&gt;
&lt;li&gt;Разбиение потоков&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Главный компонент&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Конечная деталь&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Службы: большие и малые&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Сервисная архитектура?&lt;/li&gt;
&lt;li&gt;Преимущества служб?&lt;/li&gt;
&lt;li&gt;Проблема с животными&lt;/li&gt;
&lt;li&gt;Спасение в объектах&lt;/li&gt;
&lt;li&gt;Службы на основе компонентов&lt;/li&gt;
&lt;li&gt;Сквозные задачи&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Границы тестов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тесты как компоненты системы&lt;/li&gt;
&lt;li&gt;Проектирование для простоты тестирования&lt;/li&gt;
&lt;li&gt;Программный интерфейс для тестирования&lt;/li&gt;
&lt;li&gt;Безопасность&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чистая встраиваемая архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тест на профпригодность&lt;/li&gt;
&lt;li&gt;Привязка к оборудованию — узкое место&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;База данных — это деталь&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Реляционные базы данных&lt;/li&gt;
&lt;li&gt;Почему системы баз данных настолько распространены?&lt;/li&gt;
&lt;li&gt;Сохранятся ли диски?&lt;/li&gt;
&lt;li&gt;Детали&lt;/li&gt;
&lt;li&gt;А производительность?&lt;/li&gt;
&lt;li&gt;История&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Веб — это деталь&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Бесконечный маятник&lt;/li&gt;
&lt;li&gt;Вывод&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Фреймворки — это деталь&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Авторы фреймворков&lt;/li&gt;
&lt;li&gt;Неравный брак&lt;/li&gt;
&lt;li&gt;Риски&lt;/li&gt;
&lt;li&gt;Решение&lt;/li&gt;
&lt;li&gt;Объявляю вас&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Практический пример: продажа видео&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Продукт&lt;/li&gt;
&lt;li&gt;Анализ вариантов использования&lt;/li&gt;
&lt;li&gt;Компонентная архитектура&lt;/li&gt;
&lt;li&gt;Управление зависимостями&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Недостающая глава&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Упаковка по уровням&lt;/li&gt;
&lt;li&gt;Упаковка по особенностям&lt;/li&gt;
&lt;li&gt;Порты и адаптеры&lt;/li&gt;
&lt;li&gt;Упаковка по компонентам&lt;/li&gt;
&lt;li&gt;Дьявол в деталях реализации&lt;/li&gt;
&lt;li&gt;Организация и инкапсуляция&lt;/li&gt;
&lt;li&gt;Другие режимы разделения&lt;/li&gt;
&lt;li&gt;Заключение: недостающий совет&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Программист прагматик&#34;. Э. Хант, Д. Томас.</title>
      <link>https://it-irokez.ru/books_reviews/pragmatic-programmer/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/pragmatic-programmer/</guid>
      <description>О чем книга? Книга представляет собой набор советов от программистов с многолетним стажем. Авторы попытались создать книгу для программистов, советы из которой будут полезны в не зависимости от языка программирования и стека в целом. Авторы, помимо технических вопросов, не обходят также и стороной вопросы социального взаимодействия и в целом организации командной работы. Так же авторы не забывают напомнить, что хороший программист должен постоянно развиваться, совершенствовать и оттачивать свои навыки.
Главную мысль, идущая через всю книгу, можно выразить следующими словами: &amp;ldquo;как получать максимальный результат, прикладывая минимум усилий&amp;rdquo;.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/pragmaticprogrammer.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Книга представляет собой набор советов от программистов с многолетним стажем. Авторы попытались создать книгу для программистов, советы из которой будут полезны в не зависимости от языка программирования и стека в целом. Авторы, помимо технических вопросов, не обходят также и стороной вопросы социального взаимодействия и в целом организации командной работы. Так же авторы не забывают напомнить, что хороший программист должен постоянно развиваться, совершенствовать и оттачивать свои навыки.&lt;/p&gt;
&lt;p&gt;Главную мысль, идущая через всю книгу, можно выразить следующими словами: &amp;ldquo;как получать максимальный результат, прикладывая минимум усилий&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Наиболее занимательной мне показалась мысль про оттачивание навыка владения инструментом (IDE). На заре своего становления программистом я часто пренебрегал этим навыком и не относился к нему достаточно серьезно, но в действительности, высокий уровень владения IDE способен ускорить разработку и в целом положительно сказаться на качестве кода.&lt;/li&gt;
&lt;li&gt;Лишний раз напомнил себе про важность автоматизации и различных автогенераций. Автоматическая генерация документации, спецификаций и кода способна сэкономить большое количество времени (однако, как и любую другую идею, ни что не нужно возводить в абсолют).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Тем, кто только собирается профессионально заняться разработкой;&lt;/li&gt;
&lt;li&gt;Стажерам и junior программистам.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Опытным разработчикам, которые уже уверено чувствуют себя в индустрии.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Глава 1 Прагматическая философия&lt;/li&gt;
&lt;li&gt;Глава 2 Прагматический подход&lt;/li&gt;
&lt;li&gt;Глава 3 Походный набор инструментов&lt;/li&gt;
&lt;li&gt;Глава 4 Прагматическая паранойя&lt;/li&gt;
&lt;li&gt;Глава 5 Гибкость против хрупкости&lt;/li&gt;
&lt;li&gt;Глава 6 Пока вы пишете программу&lt;/li&gt;
&lt;li&gt;Глава 7 Перед тем, как начать проект&lt;/li&gt;
&lt;li&gt;Глава 8 Прагматические проекты&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Управление памятью в .net для профессионалов&#34;. К. Кокоса</title>
      <link>https://it-irokez.ru/books_reviews/dotnet-memmory-for-professional/</link>
      <pubDate>Tue, 27 Sep 2022 08:22:13 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/dotnet-memmory-for-professional/</guid>
      <description>О чем книга? Отличная книга, которая позволит углубить знания о внутреннем устройстве платформы .net, в особенности о том, как в платформе происходит управление памятью (что прямо следует из названия).
В книге много примеров кода, демонстрирующих те или иные способы взаимодействия с платформой и приемы, которые позволят писать высокопроизводительные приложения и оптимизировать потребление памяти. Помимо этого есть конкретные способы выявления проблем с памятью и предложения по их устранению. Те, кого мало интересует написание высокопроизводительных приложений, а больше интересуются внутренним устройством платформы и сборщика мусора могут смело пропускать описанные выше разделы.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/dotnetmemmoorypanagment.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Отличная книга, которая позволит углубить знания о внутреннем устройстве платформы .net, в особенности о том, как в платформе происходит управление памятью (что прямо следует из названия).&lt;/p&gt;
&lt;p&gt;В книге много примеров кода, демонстрирующих те или иные способы взаимодействия с платформой и приемы, которые позволят писать высокопроизводительные приложения и оптимизировать потребление памяти. Помимо этого есть конкретные способы выявления проблем с памятью и предложения по их устранению. Те, кого мало интересует написание высокопроизводительных приложений, а больше интересуются внутренним устройством платформы и сборщика мусора могут смело пропускать описанные выше разделы. Кроме того, книга в целом допускает непоследовательное чтение, но из-за большого количества ссылок на предыдущие главы, есть шанс не получить полный контекст главы.&lt;/p&gt;
&lt;p&gt;В последней главе разбираются инструменты, которые могут быть полезны при реализации собственных анализаторов потребления памяти в управляемом коде платформы и даже рассказывается о том, каким способом можно реализовать собственный garbage collector, если у вас вдруг возникнет такая необходимость.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Книга позволила понять устройство GC на достаточном уровне, чтобы вопрос с собеседований &amp;ldquo;Расскажите как работает garbage collector&amp;rdquo; перестал вызывать всякое беспокойство;&lt;/li&gt;
&lt;li&gt;Отметил для себя приятные практики работы со &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, в частности, про приемы программирования без аллокаций на куче и эффективную работу со срезами;&lt;/li&gt;
&lt;li&gt;Узнал про ссылочные структуры и про возможность сделать ссылку на отдельные поля класса или даже индексы массива.&lt;/li&gt;
&lt;li&gt;Научился говорить &amp;ldquo;тип с семантикой передачи по ссылке или по значению&amp;rdquo; вместо &amp;ldquo;ссылочный или значимый тип&amp;rdquo; :D&lt;/li&gt;
&lt;li&gt;Узнал, что когда вы пишите высокоэффективный, но не поддерживаемый и не читаемый код, то это называется: &amp;ldquo;Data oriented programming&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Опытным разработчикам на платформе .net, которые хотят внутреннее устройство платформы и GC (garbage collector) в частности;&lt;/li&gt;
&lt;li&gt;Разработчикам требовательных к производительности и потреблению памяти приложений.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Новичкам, которые только начинают изучать платформу.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Глава 1. Основные понятия&lt;/li&gt;
&lt;li&gt;Глава 2. Низкоуровневое управление памятью&lt;/li&gt;
&lt;li&gt;Глава 3. Измерения памяти&lt;/li&gt;
&lt;li&gt;Глава 4. Фундаментальные основы .NET&lt;/li&gt;
&lt;li&gt;Глава 5. Разделение памяти на части&lt;/li&gt;
&lt;li&gt;Глава 6. Выделение памяти&lt;/li&gt;
&lt;li&gt;Глава 7. Сборка мусора – введение&lt;/li&gt;
&lt;li&gt;Глава 8. Сборка мусора – этап пометки&lt;/li&gt;
&lt;li&gt;Глава 9. Сборка мусора – этап планирования&lt;/li&gt;
&lt;li&gt;Глава 10. Сборка мусора – очистка и уплотнение&lt;/li&gt;
&lt;li&gt;Глава 11. Варианты сборки мусора&lt;/li&gt;
&lt;li&gt;Глава 12. Время жизни объекта&lt;/li&gt;
&lt;li&gt;Глава 13. Разное&lt;/li&gt;
&lt;li&gt;Глава 14. Продвинутые приемы&lt;/li&gt;
&lt;li&gt;Глава 15. Интерфейсы прикладного программирования (API)&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Summary</title>
      <link>https://it-irokez.ru/summary/</link>
      <pubDate>Wed, 14 Sep 2022 20:17:17 +0300</pubDate>
      
      <guid>https://it-irokez.ru/summary/</guid>
      <description>Резюме
С 2012-го года я успел поработать с такими языками как:
 python php java script (в том числе node.js) Go C# (разрабатываю на нем в настоящее время)  Уверенно чувствую себя в консолях unix like систем, сталкивался с задачами по настройке CI/CD pipeline (в рамках gitlab-ci), собирал и настраивал docker контейнеры, которые в дальнейшем с помощью docker-compose разворачивались в полноценное приложение.
Есть опыт организации работы отдела разработки с нуля.</description>
      <turbo:content>&lt;p&gt;&lt;a href=&#34;https://career.habr.com/bromid&#34;&gt;Резюме&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;С 2012-го года я успел поработать с такими языками как:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;php&lt;/li&gt;
&lt;li&gt;java script (в том числе node.js)&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;C# (разрабатываю на нем в настоящее время)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Уверенно чувствую себя в консолях unix like систем, сталкивался с задачами по настройке CI/CD  pipeline (в рамках gitlab-ci), собирал и настраивал docker контейнеры, которые в дальнейшем  с помощью docker-compose разворачивались в полноценное приложение.&lt;/p&gt;
&lt;p&gt;Есть опыт организации работы отдела разработки с нуля.&lt;/p&gt;
&lt;p&gt;В 2022-ом году прошёл курс «продвинутая разработка микросервисов на C#» от Ozon tech&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;ASP.NET Core in Action&#34;. А. Лок</title>
      <link>https://it-irokez.ru/books_reviews/aspnetcoreinaction/</link>
      <pubDate>Mon, 21 Mar 2022 09:48:11 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/aspnetcoreinaction/</guid>
      <description>И так, я дочитал ASP.NET Core in Action за авторством Андрю Лока. Книга посвящена работе с asp.net core версии 5.0. Версия уже не самая свежая, однако это нисколько не умоляет важность и нужность этой книги.
Как вы уже могли догадаться, книга мне понравилась. К моменту, как я начал читать книгу, у меня уже был опыт работы с asp.net core приложениями, и я даже успел поработать с Blazor-ом, по этому брал я ее в надежде добрать базовые знания, которые, как мы все знаем, легко недобрать если сразу погружаешься в практическую разработку.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_4.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;И так, я дочитал ASP.NET Core in Action за авторством Андрю Лока. Книга посвящена работе с asp.net core версии 5.0. Версия уже не самая свежая, однако это нисколько не умоляет важность и нужность этой книги.&lt;/p&gt;
&lt;p&gt;Как вы уже могли догадаться, книга мне понравилась. К моменту, как я начал читать книгу, у меня уже был опыт работы с asp.net core приложениями, и я даже успел поработать с Blazor-ом, по этому брал я ее в надежде добрать базовые знания, которые, как мы все знаем, легко недобрать если сразу погружаешься в практическую разработку. И я не прогадал. Книга дала мне именно то, на что я и рассчитывал – базовое понимание принципов работы и конфигурирования asp.net core приложений, объяснила особенности различия MVC и Razor pages подходов, научила работать с middleware и filter пайплайнами и проводить интеграционное тестирование всего приложения или же просто запускать его в памяти, чтобы иметь возможность протестировать работу мидлвари. В книги большое количество прикладных примеров и отдельно мое сердечко погрел тот факт, что автор уделяет внимание безопасности приложения, рассказывает о best practice и причинах, по которым они стали таковыми.&lt;/p&gt;
&lt;p&gt;Если вы новичок, который уже разобрался в том, как программировать на C# и теперь хотите качественно вкатиться в веб разработку, то эта книга – это то что вам нужно. Если же вы, как и я, уже успели вкусить разработки под asp.net core, но пропустили базовый этап обучения, то тоже настоятельно рекомендую почитать эту книгу. Читать ее целиком смысла не будет, но отдельные подглавы зацепят ваш взгляд сами по себе, в этом я уверен.&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Конкурентность в C#&#34;. С Клири</title>
      <link>https://it-irokez.ru/books_reviews/concurency/</link>
      <pubDate>Wed, 12 Jan 2022 09:44:02 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/concurency/</guid>
      <description>Если коротко &amp;ndash; книга показалась мне полезной. А теперь развернуто :D.
Начну с того, что мне в книге понравилось и что доставило мне удовольствие. Во-первых, я научился нормально использовать async/await и писать асинхронные методы (или методы поддерживающие ожидание). Во-вторых, я научился делать многопоточность с помощью PLINQ, использовать конкурентные множества и знаю зачем нужны иммутабельные (неизменяемые) множества. В-третьих, узнал об реактивном и dataflow подходах. Dataflow настолько меня впечатлил, что я даже решил утащить его в проект на работе.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_3.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Если коротко &amp;ndash; книга показалась мне полезной.
А теперь развернуто :D.&lt;/p&gt;
&lt;p&gt;Начну с того, что мне в книге понравилось и что доставило мне удовольствие. Во-первых, я научился нормально использовать async/await и писать асинхронные методы (или методы поддерживающие ожидание). Во-вторых, я научился делать многопоточность с помощью PLINQ, использовать конкурентные множества и знаю зачем нужны иммутабельные (неизменяемые) множества. В-третьих, узнал об реактивном и dataflow подходах. Dataflow настолько меня впечатлил, что я даже решил утащить его в проект на работе.&lt;/p&gt;
&lt;p&gt;Что мне в книге не понравилось:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Авторский стиль&lt;/strong&gt;.  Манера повествования автора скачет от &amp;ldquo;вы впервые увидели async&amp;rdquo; до &amp;ldquo;вам необходимо сохранить контекст потока&amp;rdquo;. Автор так и не смог определиться, пишет ли он сборник рецептов для тех, кто уже видел конкурентный код и сталкивался с его последствиями (чем на мой взгляд и является эта книга) или же попытка научить использовать конкурентность тех, кто с ней не сталкивался.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Структура книги&lt;/strong&gt;. У меня при чтении сложилось впечатление, что главы книги словно бы идут в не правильном порядке. Вероятнее всего это чисто субъективное мнение, но тем не менее.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Мало реальных примеров&lt;/strong&gt;. В книге действительно мало примеров, которые были бы введены не для наглядности, а для демонстрации мощности приведенных методов и подходов.&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Head First Паттерны проектирования&#34;. Эрика и Элизабет Фримен</title>
      <link>https://it-irokez.ru/books_reviews/head_first_patterns/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/head_first_patterns/</guid>
      <description>Еще одна книга, которую мне следовало прочитать довольно давно (Хотя бы потому что книга издания 2013-го года столько лет лежит у меня на полке). Возможно даже раньше, чем &amp;ldquo;Чистый код&amp;rdquo; Мартина. В книге на простых и понятных примерах из жизни выдуманного города &amp;ldquo;Объектвиля&amp;rdquo; разбирает паттерны:
 Стратегия; Наблюдатель; Декоратор; Фабрика; Одиночка; Команда; Адаптер; Фасад; Шаблонный метод; Итератор; Компоновщик; Состояние; Заместитель.  Примеры в книге написаны на столь горячо любимой фанатами ООП Java, но специфичных именно для Java примеров в книге не так много.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_1.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Еще одна книга, которую мне следовало прочитать довольно давно (Хотя бы потому что книга издания 2013-го года столько лет лежит у меня на полке). Возможно даже раньше, чем &amp;ldquo;Чистый код&amp;rdquo; Мартина. В книге на простых и понятных примерах из жизни выдуманного города &amp;ldquo;Объектвиля&amp;rdquo; разбирает паттерны:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Стратегия;&lt;/li&gt;
&lt;li&gt;Наблюдатель;&lt;/li&gt;
&lt;li&gt;Декоратор;&lt;/li&gt;
&lt;li&gt;Фабрика;&lt;/li&gt;
&lt;li&gt;Одиночка;&lt;/li&gt;
&lt;li&gt;Команда;&lt;/li&gt;
&lt;li&gt;Адаптер;&lt;/li&gt;
&lt;li&gt;Фасад;&lt;/li&gt;
&lt;li&gt;Шаблонный метод;&lt;/li&gt;
&lt;li&gt;Итератор;&lt;/li&gt;
&lt;li&gt;Компоновщик;&lt;/li&gt;
&lt;li&gt;Состояние;&lt;/li&gt;
&lt;li&gt;Заместитель.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Примеры в книге написаны на столь горячо любимой фанатами ООП Java, но специфичных именно для Java примеров в книге не так много.
Помимо того, что авторы рассказывают о том, как использовать тот или иной паттерн и как его реализовать, большое внимание уделяется ОО-проектированию как таковому. Из главы в главу перекочевывает постепенно расширяющийся список принципов ОО-проектирования. Именно для того, чтобы в дальнейшем лучше усвоить эти принципы я бы рекомендовал читать эту книгу ПЕРЕД чистым кодом.
В конце книги один из разделов главы посвящен тому, что использование паттернов не решит все ваши проблемы и что не нужно проектировать систему под паттерны. Они должны вписываться в систему органично и желательно не насильственно :D&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Чистый код&#34;. Р. Мартин</title>
      <link>https://it-irokez.ru/books_reviews/clear_code/</link>
      <pubDate>Sun, 05 Dec 2021 08:40:14 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/clear_code/</guid>
      <description>Вчера я закончил чтение книги, прочесть которую мне следовало довольно давно. Книга в IT среде популярна настолько, что я не вижу никакого смысла разбирать, а что же там написано, я скорее хотел бы рассказать о своих мыслях и впечатлениях.
Я программирую уже более 7-ми лет, но &amp;ldquo;качественно копать в глубину&amp;rdquo; я решил совсем недавно. Именно поэтому создалось впечатление, что книга была нужна мне лет 5 назад, когда мне советовал ее одногруппник, а не теперь, когда большая часть идей из книги была получена мной от других людей или на личном опыте.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_2.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вчера я закончил чтение книги, прочесть которую мне следовало довольно давно. Книга в IT среде популярна настолько, что я не вижу никакого смысла разбирать, а что же там написано, я скорее хотел бы рассказать о своих мыслях и впечатлениях.&lt;/p&gt;
&lt;p&gt;Я программирую уже более 7-ми лет, но &amp;ldquo;качественно копать в глубину&amp;rdquo; я решил совсем недавно. Именно поэтому создалось впечатление, что книга была нужна мне лет 5 назад, когда мне советовал ее одногруппник, а не теперь, когда большая часть идей из книги была получена мной от других людей или на личном опыте. Думаю, что вместо того, чтобы читать всю книгу целиком, я мог бы прочитать раздел &amp;ldquo;Запахи кода&amp;rdquo; (есть отличный сайт про них и чистый код) и ничего не потерять, но этот вариант подходит только тем, кто работал в командах с практиками код-ревью.&lt;/p&gt;
&lt;p&gt;Недавно в одном из чатов, где я сижу, прозвучало мнение о том, что книгу следует отправить в помойку. На мой вопрос &amp;ldquo;почему?&amp;rdquo; я ответа не получил, но вы получите от меня ответ о том, почему на мой взгляд этого делать не стоит. Думаю, что любой из вас, вне зависимости от взглядов на религию, согласится, что всякого рода заповеди вида &amp;ldquo;не укради&amp;rdquo; и &amp;ldquo;не убей&amp;rdquo; не несут в себе ничего плохого. К этой книге следует относиться также. Сама по себе она не несет ничего плохого и идеи в ней логичные и здравые, плохими они становятся при попадании в руки фанатиков, которые начинают гнаться за чистым кодом и чистой архитектурой вне контекста.&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сравнение в C#</title>
      <link>https://it-irokez.ru/articles/comparer/</link>
      <pubDate>Sat, 20 Nov 2021 17:23:23 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/comparer/</guid>
      <description>Предисловие Автор знает, как работает сравнение в C#, достаточно четко представляет разницу между семантикой значимого и ссылочного типов, однако все еще находит эту статью хорошей и позволяющей чуть глубже заглянуть под капот.
 Думаю, что каждый программист рано или поздно сталкивается с кодом, который работает «не так, как ты от него ожидаешь». Именно это и подтолкнуло меня к написанию следующей статьи, в которой я пытаюсь понять, почему Except в Linq работает так, как написан, а не так, как я хочу.</description>
      <turbo:content>&lt;h2 id=&#34;предисловие&#34;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Автор знает, как работает сравнение в C#, достаточно четко представляет разницу между семантикой значимого и ссылочного типов, однако все еще находит эту статью хорошей и позволяющей чуть глубже заглянуть под капот.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Думаю, что каждый программист рано или поздно сталкивается с кодом, который работает «не так, как ты от него ожидаешь». Именно это и подтолкнуло меня к написанию следующей статьи, в которой я пытаюсь понять, почему Except в Linq работает так, как написан, а не так, как я хочу.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Что, по вашему мнению, должен вывести следующий код:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));

FileInfo[] FirstDirrectoryFiles = documentsDir.GetFiles();
FileInfo[] SecondDirrectoryFiles = documentsDir.GetFiles();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; FirstDirrectoryFiles.Except(SecondDirrectoryFiles))
{
    Console.WriteLine(item.Name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Я вот предположил, что ничего, потому что Except должен вычитать множество (IEnumerable) правого аргумента из множества (IEnumerable) левого аргумента. Однако, вопреки моим ожиданиям я получил:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вне всякого сомнения — это не похоже на пустое множество. Давайте попробуем разобраться в том, почему так получается (результат в .NET 5 и в .NET 6 — эквивалентен). Чтобы понять, почему так происходит, и что можно с этим сделать обратимся к документации метода &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/api/system.linq.enumerable.except?view=net-6.0&#34;&gt;Except&lt;/a&gt;. Там действительно написано, что этот метод «Находит разность множеств, представленных двумя последовательностями» и имеет две перегрузки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Except&amp;lt;TSource&amp;gt;(IEnumerable&amp;lt;TSource&amp;gt;, IEnumerable&amp;lt;TSource&amp;gt;)&lt;/code&gt; Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Except&amp;lt;TSource&amp;gt;(IEnumerable&amp;lt;TSource&amp;gt;, IEnumerable&amp;lt;TSource&amp;gt;, IEqualityComparer&amp;lt;TSource&amp;gt;)&lt;/code&gt;. Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор IEqualityComparer&lt;!-- raw HTML omitted --&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Обратите внимание на заявление о том, что для сравнения используется компаратор по умолчанию. Чтобы понять, почему наш код сработал именно так, как сработал, нам предстоит разобраться с поведением компаратора по умолчанию. Для этого я предлагаю проследовать на &lt;a href=&#34;https://github.com/dotnet/runtime/&#34;&gt;https://github.com/dotnet/runtime/&lt;/a&gt; и проанализировать работу метода Except.&lt;/p&gt;
&lt;p&gt;Наша &lt;a href=&#34;https://github.com/dotnet/runtime/blob/a7c69745a4e22757c69f65d2a750e2d6923e1186/src/libraries/System.Linq/src/System/Linq/Except.cs#L10&#34;&gt;точка входа&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; Except&amp;lt;TSource&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; first, IEnumerable&amp;lt;TSource&amp;gt; second)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (first == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.first);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (second == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.second);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ExceptIterator(first, second, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Метод проверяет, что получил два объекта с ненулевым указателем и передает аргументы в &lt;a href=&#34;https://github.com/dotnet/runtime/blob/a7c69745a4e22757c69f65d2a750e2d6923e1186/src/libraries/System.Linq/src/System/Linq/Except.cs#L79&#34;&gt;ExceptIterator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Строго говоря, можно было бы использовать и метод перегрузку, так как он работает буквально также:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; Except&amp;lt;TSource&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; first, IEnumerable&amp;lt;TSource&amp;gt; second, IEqualityComparer&amp;lt;TSource&amp;gt;? comparer)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (first == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.first);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (second == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.second);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ExceptIterator(first, second, comparer);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Почему перегрузка, а не параметр по умолчанию? Силами &lt;a href=&#34;https://t.me/dotnettalks&#34;&gt;сообщества&lt;/a&gt; было вынесено предположение, что дело в &lt;a href=&#34;https://coding.abel.nu/2014/07/adding-an-overload-is-a-breaking-change/&#34;&gt;этом&lt;/a&gt; и &lt;a href=&#34;https://rules.sonarsource.com/csharp/RSPEC-2360&#34;&gt;этом&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Собственно код &lt;a href=&#34;https://github.com/dotnet/runtime/blob/a7c69745a4e22757c69f65d2a750e2d6923e1186/src/libraries/System.Linq/src/System/Linq/Except.cs#L79&#34;&gt;ExceptIterator&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; ExceptIterator&amp;lt;TSource&amp;gt;(IEnumerable&amp;lt;TSource&amp;gt; first, IEnumerable&amp;lt;TSource&amp;gt; second, IEqualityComparer&amp;lt;TSource&amp;gt;? comparer)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;TSource&amp;gt;(second, comparer);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (TSource element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; first)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;.Add(element))
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; element;
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Из элементов второго аргумента создается &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/HashSet.cs#L55&#34;&gt;множество&lt;/a&gt;. Элементы первого аргумента, которые удалось добавить в множество, возвращаются в качестве итератора.&lt;/p&gt;
&lt;p&gt;Конструктор множества принимает интерфейс компаратора, который используется для сравнения элементов множества:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Конкретно в нашем случае компаратор равен null, поэтому проваливаемся в свойство Default обобщенного класса EqualityComparer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HashSet(IEqualityComparer&amp;lt;T&amp;gt;? comparer)
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (comparer &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; not &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; comparer != EqualityComparer&amp;lt;T&amp;gt;.Default) &lt;span style=&#34;color:#75715e&#34;&gt;// first check for null to avoid forcing default comparer instantiation unnecessarily
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
        &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;comparer = comparer;
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// Special-case EqualityComparer&amp;lt;string&amp;gt;.Default, StringComparer.Ordinal, and StringComparer.OrdinalIgnoreCase.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// We use a non-randomized comparer for improved perf, falling back to a randomized comparer if the
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// hash buckets become unbalanced.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T) == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;))
    {
        IEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;? stringComparer = NonRandomizedStringEqualityComparer.GetStringComparer(&lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;comparer);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stringComparer &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; not &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#ae81ff&#34;&gt;_&lt;/span&gt;comparer = (IEqualityComparer&amp;lt;T&amp;gt;?)stringComparer;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/EqualityComparer.CoreCLR.cs#L10&#34;&gt;Тут&lt;/a&gt;, на мой скромный взгляд, все очевидно:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EqualityComparer&lt;/span&gt;&amp;lt;T&amp;gt; : IEqualityComparer, IEqualityComparer&amp;lt;T&amp;gt;
{
    &lt;span style=&#34;color:#75715e&#34;&gt;// To minimize generic instantiation overhead of creating the comparer per type, we keep the generic portion of the code as small
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// as possible and define most of the creation logic in a non-generic class.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EqualityComparer&amp;lt;T&amp;gt; Default { [Intrinsic] &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; } = (EqualityComparer&amp;lt;T&amp;gt;)ComparerHelpers.CreateDefaultEqualityComparer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Комментарий гласит, что с целью минимизации накладных расходов на создание универсального экземпляра для каждого типа код обобщенных классов уменьшают насколько это возможно за счет переноса его логики в необобщенный класс (в нашем случае это ComparerHelpers).&lt;/p&gt;
&lt;p&gt;Давайте же посмотрим на то, как &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/ComparerHelpers.cs#L116&#34;&gt;происходит процесс создания компаратора по умолчанию&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; CreateDefaultEqualityComparer(Type type)
{
    Debug.Assert(type != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; type &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; RuntimeType);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;object?&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; runtimeType = (RuntimeType)type;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;))
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Specialize for byte so Array.IndexOf is faster.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        result = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ByteEqualityComparer();
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;))
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Specialize for string, as EqualityComparer&amp;lt;string&amp;gt;.Default is on the startup path
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        result = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GenericEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;();
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.IsAssignableTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IEquatable&amp;lt;&amp;gt;).MakeGenericType(type)))
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// If T implements IEquatable&amp;lt;T&amp;gt; return a GenericEqualityComparer&amp;lt;T&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        result = CreateInstanceForAnotherGenericParameter((RuntimeType)&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(GenericEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;), runtimeType);
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.IsGenericType)
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// Nullable does not implement IEquatable&amp;lt;T?&amp;gt; directly because that would add an extra interface call per comparison.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Instead, it relies on EqualityComparer&amp;lt;T?&amp;gt;.Default to specialize for nullables and do the lifted comparisons if T implements IEquatable.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.GetGenericTypeDefinition() == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Nullable&amp;lt;&amp;gt;))
        {
            result = TryCreateNullableEqualityComparer(runtimeType);
        }
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.IsEnum)
    {
        &lt;span style=&#34;color:#75715e&#34;&gt;// The equality comparer for enums is specialized to avoid boxing.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        result = TryCreateEnumEqualityComparer(runtimeType);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result ?? CreateInstanceForAnotherGenericParameter((RuntimeType)&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(ObjectEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;&amp;gt;), runtimeType);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Пойдем по порядку:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Если тип аргумента byte, то возвращается компаратор специально для этого типа (ByteEqualityComparer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если это строка, то возвращается GenericEqualityComparer&lt;!-- raw HTML omitted --&gt;();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если тип реализует IEquatable, то на основе GenericEqualityComparer&lt;!-- raw HTML omitted --&gt; возвращается GenericEqualityComparer для типа аргумента (даже не спрашивайте);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если аргумент является универсальным типом (обобщением) и если этот универсальный тип Nullable&amp;lt;&amp;gt;,  &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/ComparerHelpers.cs#L160&#34;&gt;то на основе&lt;/a&gt; NullableEqualityComparer&lt;!-- raw HTML omitted --&gt;  создается NullableEqualityComparer для типа аргумента;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если аргумент – перечисление, &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/ComparerHelpers.cs#L179&#34;&gt;то на основе&lt;/a&gt; EnumEqualityComparer&amp;lt;&amp;gt; создается EnumEqualityComparer;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Во всех остальных случаях на основе ObjectEqualityComparer&lt;!-- raw HTML omitted --&gt; создается ObjectEqualityComparer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;С помощью такого нехитрого кода (хотел было переписать через string builder, но, думаю, тут можно забить :D) попробуем понять, какой же из перечисленных случаев – наш:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
FileInfo[] result1 = documentsDir.GetFiles();
FileInfo[] result2 = documentsDir.GetFiles();

Type type = result1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].GetType();
Console.Write(
    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type == typeof(byte): {type == typeof(byte)}\n&amp;#34;&lt;/span&gt; +
    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type == typeof(string): {type == typeof(string)}\n&amp;#34;&lt;/span&gt; +
    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type.IsAssignableTo(typeof(IEquatable&amp;lt;&amp;gt;).MakeGenericType(type)): {type.IsAssignableTo(typeof(IEquatable&amp;lt;&amp;gt;).MakeGenericType(type))}\n&amp;#34;&lt;/span&gt; +
    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type.IsGenericType: {type.IsGenericType}\n&amp;#34;&lt;/span&gt; +
    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type.IsEnum: {type.IsEnum}\n\n&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Что и следовало ожидать:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Это значит, что теперь наш путь лежит в &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/EqualityComparer.cs&#34;&gt;ObjectEqualityComparer&lt;/a&gt;. Вот, собственно, и он:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectEqualityComparer&lt;/span&gt;&amp;lt;T&amp;gt; : EqualityComparer&amp;lt;T&amp;gt;
{
&lt;span style=&#34;color:#a6e22e&#34;&gt;    [MethodImpl(MethodImplOptions.AggressiveInlining)]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals(T? x, T? y)
    {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
        {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.Equals(y);
            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
    }
&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [MethodImpl(MethodImplOptions.AggressiveInlining)]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode([DisallowNull] T obj) =&amp;gt; obj?.GetHashCode() ?? &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#75715e&#34;&gt;// Equals method for the comparer itself.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals([NotNullWhen(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;object?&lt;/span&gt; obj) =&amp;gt;
        obj != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; GetType() == obj.GetType();

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode() =&amp;gt;
        GetType().GetHashCode();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ObjectEqualityComparer определяет метод Equals для двух объектов следующим образом:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Объекты равны, если они оба null (что логично);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Объекты не равны, если только один из них null;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если оба объекта не null, то их эквивалентность определяется методом Equals «левого» аргумента.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если обратиться к &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/api/system.io.fileinfo?view=net-6.0#methods&#34;&gt;документации&lt;/a&gt;, то можно увидеть, что у нашего класса FileInfo действительно есть метод Equals с пометкой «Унаследовано от Object». Что же, &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/api/system.object.equals?view=net-6.0#System_Object_Equals_System_Object_&#34;&gt;туда&lt;/a&gt; и лежит наш путь! Там в секции «комментарии» мы можем узнать, что:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Если текущий экземпляр является ссылочным типом, Equals(Object) метод проверяет равенство ссылок, а вызов Equals(Object) метода эквивалентен вызову ReferenceEquals метода. Равенство ссылок означает, что сравниваемые объектные переменные ссылаются на один и тот же объект.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;На этом, казалось, можно было бы завершить наше путешествие, но давайте на последок придумаем, как заставить Except перестать показывать файлы в директории с моими документами.&lt;/p&gt;
&lt;p&gt;Вариант из категории «пока так, потом пофикшу»:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
FileInfo[] result1 = documentsDir.GetFiles();
FileInfo[] result2 = documentsDir.GetFiles();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result1
                                 .Select(i =&amp;gt; i.FullName)
                                 .Except(result2.Select(i =&amp;gt; i.FullName))
                                 .Select(i =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileInfo(i)))
{
    Console.WriteLine(item.Name);
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Мы, по сути, вызываем Except для двух IEnumerate&lt;!-- raw HTML omitted --&gt;, а потом из результата снова собираем IEnumerate&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;В свежем .net6 еще можно воспользоваться &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.exceptby?view=net-6.0&#34;&gt;ExceptBy&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
FileInfo[] result1 = documentsDir.GetFiles();
FileInfo[] result2 = documentsDir.GetFiles();
&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result1.ExceptBy(result2.Select(i =&amp;gt; i.FullName), ks =&amp;gt; ks.FullName))
{
    Console.WriteLine(item.Name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Этот код уже выглядит приятнее и даже избавляет нас от необходимости разбирать и снова собирать изначальный массив, но можно сделать это иначе.&lt;/p&gt;
&lt;p&gt;Следующей идеей, посетившей мою голову, было унаследовать FileInfo и переопределить Equals, но, к сожалению, FileInfo является запечатанным (sealed) классом, а это значит, что он не может быть унаследован, так что этот путь нам отрезан.&lt;/p&gt;
&lt;p&gt;Подойдем к вопросу с другой стороны. Вспомним, что Equals имеет перегрузку, принимающую вторым аргументом IEqualityComparer, что позволяет нам создать что-то вроде такого решения:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
FileInfo[] result1 = documentsDir.GetFiles();
FileInfo[] result2 = documentsDir.GetFiles();

&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result1.Except(result2, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomFileInfoComparer()))
{
    Console.WriteLine(item.Name);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomFileInfoComparer&lt;/span&gt; : IEqualityComparer&amp;lt;FileInfo&amp;gt;
{
    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IEqualityComparer&amp;lt;FileInfo&amp;gt;.Equals(FileInfo? lhv, FileInfo? rhv)
       =&amp;gt; lhv?.FullName == rhv?.FullName;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; IEqualityComparer&amp;lt;FileInfo&amp;gt;.GetHashCode(FileInfo obj) =&amp;gt; obj.FullName.GetHashCode();
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Это решение хорошо подходит в том случае, если дальше по коду вам предстоит еще хотя бы раз сравнивать IEnumerable&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;На этом у меня все, надеюсь, что читатель нашел любопытным мой скромный труд.&lt;/p&gt;
&lt;p&gt;Хочется выразить огромную благодарность моей жене за помощь в подготовке данного поста, а также сообществу &lt;a href=&#34;https://t.me/dotnettalks&#34;&gt;.NET Talks&lt;/a&gt;&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Гри-Гри для JWT</title>
      <link>https://it-irokez.ru/articles/grigri/</link>
      <pubDate>Tue, 19 May 2020 19:33:19 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/grigri/</guid>
      <description>Оригинальная публикация
Гри-гри — талисман вуду или амулет для защиты владельца от зла или на счастье.
JWT (JSON Web Token) – это токен, а будет этот токен хорошим или плохим, зависит исключительно от вашей реализации. Структура JWT определена в соответствующем RFC , но если кратко, то JWT состоит из трех частей: заголовка (header), полезной нагрузки (payload) и подписи или данных шифрования. Заголовок и нагрузка представляют собой JSON-объекты “определенной” структуры, а третья часть – это зачастую подпись первой и второй частей.</description>
      <turbo:content>&lt;p&gt;&lt;a href=&#34;https://dc7495.org/gris-gris-for-jwt/&#34;&gt;Оригинальная публикация&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Гри-гри&lt;/strong&gt; — талисман вуду
или амулет для защиты
владельца от зла или на счастье.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JWT&lt;/strong&gt; (JSON Web Token) – это токен, а будет этот токен хорошим или плохим, зависит исключительно от вашей реализации. Структура JWT определена в &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;соответствующем RFC&lt;/a&gt; , но если кратко, то JWT состоит из трех частей: заголовка (header), полезной нагрузки (payload) и подписи или данных шифрования. Заголовок и нагрузка представляют собой JSON-объекты “определенной” структуры, а третья часть – это зачастую подпись первой и второй частей. Если верить Википедии, то чаще всего вам придется сталкиваться с тем, что по науке называется JWS/JWE Compact Serialization, т.е. “компактная” версия токена. От развернутой она отличается тем, что заголовок и нагрузка кодируются в base64url, записываются через точку, после чего получившуюся строку подписывают, тоже кодируют в base64url и дописывают в конец снова через разделитель “точка”. Т.е. на выходе получается что-то вроде:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NSIsIm5hbWUiOiJKb2huIEdvbGQiLCJhZG1pbiI6dHJ1ZX0K.LIHjWCBORSWMEibq-tnT8ue_deUqZx1K0XxCOXZRrBI&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Теперь чуть подробнее про каждую из частей, начнем, что называется, с головы. В заголовке указывается необходимая информация для описания самого токена.&lt;/p&gt;
&lt;p&gt;Обязательный ключ здесь только один:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alg: алгоритм, используемый для подписи/шифрования (в случае не подписанного JWT используется значение «none»).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Необязательные ключи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typ: тип токена (type). Используется в случае, когда токены смешиваются с другими объектами, имеющими JOSE-заголовки. Должно иметь значение “JWT”.&lt;/li&gt;
&lt;li&gt;cty: тип содержимого (content type). Если в токене помимо зарегистрированных служебных ключей есть пользовательские, то данный ключ не должен присутствовать. В противном случае он должен иметь значение “JWT”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В разделе полезной нагрузки указывается пользовательская информация (например, имя пользователя и уровень его доступа), а также могут быть использованы некоторые служебные ключи. Все они являются необязательными:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iss: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, генерирующей токен (issuer).&lt;/li&gt;
&lt;li&gt;sub: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, о которой содержится информация в данном токене (subject). Значения с этим ключом должны быть уникальны в контексте стороны, генерирующей JWT.&lt;/li&gt;
&lt;li&gt;aud: массив чувствительных к регистру строк или URI, являющийся списком получателей данного токена. Когда принимающая сторона получает JWT с данным ключом, она должна проверить наличие себя в получателях — иначе проигнорировать токен (audience).&lt;/li&gt;
&lt;li&gt;exp: время в формате Unix Time, определяющее момент, когда токен станет невалидным (expiration).&lt;/li&gt;
&lt;li&gt;nbf: в противовес ключу exp, время в формате Unix Time, определяющее момент, когда токен станет валидным (not before).&lt;/li&gt;
&lt;li&gt;jti: строка, определяющая уникальный идентификатор данного токена (JWT ID).&lt;/li&gt;
&lt;li&gt;iat: время в формате Unix Time, определяющее момент, когда токен был создан. iat и nbf могут не совпадать, например, если токен был создан раньше, чем время, когда он должен стать валидным.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;кейсы&#34;&gt;Кейсы&lt;/h1&gt;
&lt;p&gt;Теперь, когда ты, дорогой читатель, получил базовое представление о том, что такое JWT-токен, я могу перестать копипастить Википедию и заняться разбором проколов, связанных с безопасностью JWT на примере заданий с root-me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.root-me.org/en/Challenges/Web-Server/JSON-Web-Token-JWT-Introduction&#34;&gt;JSON Web Token (JWT) – Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.root-me.org/en/Challenges/Web-Server/JSON-Web-Token-JWT-Weak-secret&#34;&gt;JSON Web Token (JWT) – Weak secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.root-me.org/en/Challenges/Web-Server/JSON-Web-Token-JWT-Public-key&#34;&gt;JSON Web Token (JWT) – Public key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И сразу ссылки на полезные источники, которые позволят вам избежать дальнейшего чтения моей статьи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/&#34;&gt;Attacking JWT authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/101-writeups/hacking-json-web-token-jwt-233fe6c862e6&#34;&gt;Hacking JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;В задании говорится о том, что необходимо авторизоваться под админом, чтобы получить флаг. Точкой входа предстает такая форма:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_1.png&#34; alt=&#34;форма&#34;&gt;&lt;/p&gt;
&lt;p&gt;Так как аккаунта у нас нет, а задание явно направлено на злоупотребление каким-нибудь токеном, попробуем авторизоваться как гость:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_2.png&#34; alt=&#34;guest&#34;&gt;&lt;/p&gt;
&lt;p&gt;И получаем заветный токен в куке:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_3.png&#34; alt=&#34;токен&#34;&gt;&lt;/p&gt;
&lt;p&gt;Хватаем содержимое куки jwt и идем с ним на &lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt; , где и лицезреем следующую картину:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Чутье бывалого проникновенца говорит нам, что необходимо поменять username с guest на admin и переподписать все это дело. Однако HMAC с использованием SHA-256 требует от нас знания некоего секрета, который создатель задания сообщить нам забыл… Да кому вообще нужна эта подпись, сгенерируем себе токен и без нее:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_5.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Заменяем значение куки jwt на полученный токен и надеемся, что программист ресурса не такой крутой профессионал, как мы:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вы великолепны! Вы не зря зовете себя ковбоем клавиатуры!&lt;/p&gt;
&lt;h2 id=&#34;weak-secret&#34;&gt;Weak secret&lt;/h2&gt;
&lt;p&gt;По одному только названию становится понятно, в чем в этот раз будет проблема. Но давайте не будем сильно забегать вперед и для начала поговорим о том, что за “HS256” использовался для подписи сообщения в предыдущем примере. HS256 – это HMAC with SHA-256. Что это значит для нас, простых смертных людей, не обремененных знаниями криптографической магии? Интернет говорит, что HMAC (Hash-based Message Authentication Code) – это код аутентификации сообщения на основе хэширования. Данный вид аутентификации подразумевает наличие у клиента и сервера некоего секретного ключа, который известен только им двоим. Отлично, опытный проникновенец внутри вас наверняка прочитал эту фразу как “это что-то симметричное и его можно сбрутить”. Теперь мы морально готовы приступать к заданию с root-me.&lt;/p&gt;
&lt;p&gt;Поехали. Точка входа в задание одаривает нас JSON-ом следующего содержания:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{     
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s play a small game, I bet you cannot access to my super secret admin section. Make a GET request to /token and use the token you&amp;#39;ll get to try to access /admin with a POST request.&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Я, конечно, не уверен, но, кажется, нам необходимо сделать GET-запрос на /token. Оттуда на нас нисходит новый JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Here is your token&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlIjoiZ3Vlc3QifQ.4kBPNf7Y6BrtP-Y3A-vQXPY9jAh_d0E6L4IUjL65CvmEjgdTZyr2ag-TM-glH6EYKGgO3dBYbhblaPQsbeClcw&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Поле role, вероятнее всего, придется сменить с guest на admin, но сразу возникает вопрос валидности подписи. Если же в этом задании вы решите попробовать поменять алгоритм подписи на различные вариации None, то это не сработает. Название челленджа как бы намекает…&lt;/p&gt;
&lt;p&gt;Намекает на то, что можно воспользоваться утилитой типа &lt;a href=&#34;https://github.com/Sjord/jwtcrack&#34;&gt;jwtcrack&lt;/a&gt;  или &lt;a href=&#34;https://github.com/magnumripper/JohnTheRipper&#34;&gt;John the Ripper&lt;/a&gt;  (я так и не понял, как заставить его работать с jwt), которые позволят узнать секрет методом словарного перебора и переподписать себе токен.&lt;/p&gt;
&lt;p&gt;Запускаем jwtcrack:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Фантастика, мы заполучили секрет и теперь можем переписать себе токен:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Его мы засовываем в заголовок Authorization (почему-то без Bearer) и получаем ключ этой таски. Можно рассказывать теперь историю этого взлома в баре “Джентльмен неудачник”; историю про сожжение Хром вы, конечно, не затмите, но использовать стойкие ключи научите.&lt;/p&gt;
&lt;h2 id=&#34;public-key&#34;&gt;Public key&lt;/h2&gt;
&lt;p&gt;В этот раз без теоретического введения, с места в карьер, так сказать. В челлендже нам дают три endpoint-а api:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/key (GET)&lt;/li&gt;
&lt;li&gt;/auth (POST)&lt;/li&gt;
&lt;li&gt;/admin (POST)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;И говорят, чтобы мы всех хакнули.&lt;/p&gt;
&lt;p&gt;Пойдем по порядку и постучим на key:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Как и ожидалось, мы получили ключ… Публичный. Сохраняем его себе куда-нибудь и идем дальше. На /auth нас просят послать свой username в теле запроса. Выполнив требования, получаем:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вы уже поняли, да? Идем на jwt.io  и смотрим на то, что мы получили:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Видим RS256, и это печалит. Сразу становится понятно, зачем нам дали публичный ключ. RS – это RSA SHA, а RSA (Rivest-Shamir-Adleman) использует асимметричные ключи. Вы, конечно, можете попробовать способы из предыдущих двух заданий, но они тут не сработают. Зато сработает ход, который в обычных условиях показался бы не самым логичным. Давайте попробуем изменить алгоритм подписи с RS256 на HS256, а в качестве секретного ключа использовать полученный нами ранее публичный ключ.&lt;/p&gt;
&lt;p&gt;Возникает логичный вопрос, а какого черта это вообще должно сработать? Мы надеемся на то, что код расшифровки токена на сервере выглядит как-то так:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;И все это прекрасно работает, если у нас действительно используется асимметричный алгоритм подписи (в нашем случае RSA SHA-256), но если вместо чего-то асимметричного туда попадает что-то симметричное (HMAC SHA-256), то публичный ключ будет обработан функцией как симметричный ключ и токен будет валиден.&lt;/p&gt;
&lt;p&gt;Дальше придется произвести пляски с бубном, которые бы не пришлось проводить будь версия pyjwt не такой свежей. Связано это с тем, что свежие версии pyjwt не дают использовать публичный ключ в качестве секрета для HS256. Но начнем мы все равно с python:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Отсюда нам понадобятся заголовок и нагрузка:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;А вот подписывать эти части нам придется самостоятельно.&lt;/p&gt;
&lt;p&gt;Перегоним наш ключ, полученный ранее, в последовательность HEX-ов:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417576773168347477504a6e5a42772b54327743440a59624832556b4d427852672f686b534d6c365a77693259566d37397771723372506433676a7430695a576432724e42337175644b5749536d42516132517152480a74503666546a6569354d413471734c53586c32724765576a47767471704851446d63583447417841454b7947306e6632445065324170454330323152472f564f0a64595343414149702b536d6443746d35504966314153694f4141585537644c37324959736f63534d6759705249634a755a5341435571314a367775553958796c0a7042314e7657774644334659437a72655435416b5469636276676546316b39792f4f4b5431667632626e5347706a354b4d45462f51575552377877337262516b0a796e6365436a714645744c78584873584a506d5536676a4132494377547131475671435a447a6a6a665162426f4b7a6d59534f774c7a4f6e364a6237454f50670a58514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;А теперь самостоятельно, как взрослые мальчики, подпишем себе токен:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0&amp;#34;&lt;/span&gt; | openssl dgst -sha256 -mac HMAC -macopt hexkey: 2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417576773168347477504a6e5a42772b54327743440a59624832556b4d427852672f686b534d6c365a77693259566d37397771723372506433676a7430695a576432724e42337175644b5749536d42516132517152480a74503666546a6569354d413471734c53586c32724765576a47767471704851446d63583447417841454b7947306e6632445065324170454330323152472f564f0a64595343414149702b536d6443746d35504966314153694f4141585537644c37324959736f63534d6759705249634a755a5341435571314a367775553958796c0a7042314e7657774644334659437a72655435416b5469636276676546316b39792f4f4b5431667632626e5347706a354b4d45462f51575552377877337262516b0a796e6365436a714645744c78584873584a506d5536676a4132494377547131475671435a447a6a6a665162426f4b7a6d59534f774c7a4f6e364a6237454f50670a58514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Наша подпись:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f4a3602e56b0b5d07229d66130ef0aedd1d338cbdc543641d0bb8bedaf8f65ba&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Но не спешите подставлять ее в наш токен. Вы ведь помните, что подпись должна быть base64url? Кодируем:&lt;/p&gt;
&lt;p&gt;Но не спешите подставлять ее в наш токен. Вы ведь помните, что подпись должна быть base64url? Кодируем:&lt;/p&gt;
&lt;p&gt;Получаем:&lt;/p&gt;
&lt;p&gt;9KNgLlawtdByKdZhMO8K7dHTOMvcVDZB0LuL7a-PZbo&lt;/p&gt;
&lt;p&gt;Собираем токен в кучу:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.9KNgLlawtdByKdZhMO8K7dHTOMvcVDZB0LuL7a-PZbo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Засовываем в заголовок Authorization: Bearer и хвастаемся еще одним успешным взломом.&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>ПОСТРОЕНИЕ СИСТЕМЫ АГРЕГИРОВАНИЯ ИНФОРМАЦИИ</title>
      <link>https://it-irokez.ru/articles/agregate/</link>
      <pubDate>Tue, 01 May 2018 00:00:59 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/agregate/</guid>
      <description>Оригинал статьи. Статья была написана в рамках моего обучения в магистратуре.
 В современном мире, где объемы данных, поступающие в информационные системы, имеют тенденцию к постоянному росту, а отдельное клиентское устройство зачастую не способно совершать выборку и обработку всех необходимых данных режиме реального времени, вопрос построения систем агрегирования информации встает все более остро.
Что же представляет из себя система агрегирования информации в сети Интернет? Согласно [4], система агрегации это способ создания новых web-приложений за счет объединения уже существующих интернетресурсов.</description>
      <turbo:content>&lt;p&gt;&lt;a href=&#34;http://journal.tc22.ru/wp-content/uploads/2018/05/postroenie_sistemi_agregirovaniya_informacii.pdf&#34;&gt;Оригинал статьи&lt;/a&gt;. Статья была написана в рамках моего обучения в магистратуре.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;В современном мире, где объемы данных, поступающие в информационные системы, имеют тенденцию к постоянному росту, а отдельное клиентское устройство зачастую не способно совершать выборку и обработку всех необходимых данных режиме реального времени, вопрос построения систем агрегирования информации встает все более остро.&lt;/p&gt;
&lt;p&gt;Что же представляет из себя система агрегирования информации в сети Интернет? Согласно [4], система агрегации это способ создания новых web-приложений за счет объединения уже существующих интернетресурсов.&lt;/p&gt;
&lt;p&gt;Зачастую, подобного рода системы проектируются как горизонтально масштабируемые системы [1] и служат надстройкой над API некоторых web-сервисов с целью получения больших выборок данных за время меньшее, чем если бы это делалось средствами отдельно взятого устройства [5]. Под масштабируемостью принято понимать способность системы увеличивать свою производительность при добавлении в систему ресурсов.&lt;/p&gt;
&lt;p&gt;Различают понятия горизонтальной и вертикальной масштабируемости. Вертикальная масштабируемость – способность системы увеличить общую производительность при увеличении производительности отдельных ее элементов. Горизонтальная масштабируемость – способность системы увеличивать производительность при увеличении количества элементов, участвующих в обработке информации [3].&lt;/p&gt;
&lt;p&gt;В данной статье содержатся положения касаемо построения модели взаимодействия компонентов горизонтально масштабируемой системы доступа к удаленным информационным ресурсам в контексте использования данной системы в качестве агрегирующего сервиса. На построенной модели проведено исследование оптимальной конфигурации горизонтально масштабируемого слоя системы. Данный подход позволяет в рамках одной модели отразить как взаимодействие пользователя с данной системой, так и взаимодействие отдельных компонентов системы между собой.&lt;/p&gt;
&lt;p&gt;Системы агрегации информации (в западной технической литературе [4,5] устоялся термин «mashupсистемы») строятся на основе горизонтально масштабируемых систем [2]. В рамках архитектуры «клиентсервер» подобная система может соответствовать архитектуре, представленной на рисунке 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/agregate_1.png&#34; alt=&#34;Рис. 1. Архитектура «клиент-сервер» с горизонтально масштабируемым слоем&#34;&gt;&lt;/p&gt;
&lt;p&gt;Рис. 1. Архитектура «клиент-сервер» с горизонтально масштабируемым слоем&lt;/p&gt;
&lt;p&gt;Один из вариантов архитектуры горизонтально масштабированного слоя представлен на изображении (рис.2). Пользователь формирует абстрактный запрос к контролеру горизонтально масштабированного слоя, затем контролер горизонтально масштабируемого слоя обрабатывает запрос, произведя разложение на некоторое количество подзапросов (в случае необходимо), которые могут быть удовлетворены API сервиса и переданы в виде задач другим серверам системы. Связанные с контролером серверы выполняют запрос к удаленному серверу и, получив ответ, передают его контролеру горизонтально масштабируемого слоя, который объединяет ответы, полученные от подчиненных серверов, передает агрегированный результат клиенту.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/agregate_2.png&#34; alt=&#34;Рис. 2. Архитектура горизонтально масштабируемого слоя&#34;&gt;&lt;/p&gt;
&lt;p&gt;Рис. 2. Архитектура горизонтально масштабируемого слоя&lt;/p&gt;
&lt;p&gt;Для выявления устойчивой к заявленным нагрузкам конфигурации горизонтально масштабируемого слоя в среде имитационного моделирования AnyLogic разработана модель, представленная на рисунке 3. Модель представляет собой набор логических элементов. Элемент source выступает в качестве генератора запросов, delay и delay1 используются для моделирования временной задержки. Сущность resourcePool является хранилищем ресурсов (в данном случае количества потоков), сущность seize хранит заданное количество запросов и при достаточном количестве ресурсов, передает запрос далее.&lt;/p&gt;
&lt;p&gt;В случае невозможности обработки запроса, запрос уничтожается в сущности sink. Сущность sink1 также используется для уничтожения запросов, по завершению работы цикла.&lt;/p&gt;
&lt;p&gt;Для моделирования предложена ситуация, когда горизонтально масштабируемый слой используется в качестве сервиса, а интенсивность запросов, заложенная в source, составляет случайное значение согласно треугольному распределению [6] от 1 до 20 с наиболее вероятным значением, составляющим 5 запросов в минуту.&lt;/p&gt;
&lt;p&gt;Моделирование включает три этапа:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Моделирование работы контроллера и удаленного сервера. В рамках этапа моделируется обработка 3 запроса контроллером и удаленным сервером, работа контроллера по разделению первичного запроса. Время на обработку запроса контролером (delay1) и удаленным сервером (delay) заложено как случайное значение согласно треугольному распределению от 0.5 до 5 с наиболее вероятным значением 1 секунда на обработку одного запроса. Блок split используется для моделирования работы контролера по разделению первичного запроса к горизонтально масштабируемому слою на запросы, которые необходимо совершить к API удаленного сервиса. После разделения, оригинальный запрос перемещается в sink.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/agregate_3.png&#34; alt=&#34;Рис. 3. Модель горизонтально масштабируемого слоя как сервиса&#34;&gt;&lt;/p&gt;
&lt;p&gt;Рис. 3. Модель горизонтально масштабируемого слоя как сервиса&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Моделирование работы горизонтально масштабированного слоя. Работа серверов горизонтально
масштабируемого слоя, которым контролер ставит в соответствие задачи, реализуется блоками resourcePool, release и seize. Элемент resourcePool представляет собой набор потоков, доступных в горизонтально масштабируемом слое для запроса к API удаленного сервера и рассчитывается как Servers*10, где Servers это количество серверов в горизонтально масштабируемом слое используемых для решения задач, полученных от контроллера. Каждый сервер обладает потенциалом обработки 10 одновременных потоков, поэтому размер очереди блока seize рассчитывается аналогично.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Моделирование потоков. Освобождение потоков происходит после получения ответа от удаленного сервера. Возвращение ресурсов (свободных потоков) в resourcePool моделируется блоком release. Если блок seize не может обработать поступивший запрос или поместить его в очередь, то запрос поступает в sink2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Для данной модели, приняты следующие допущения: оптимальным количеством серверов считается такое количество серверов в горизонтально масштабируемом слое, при котором не один из запросов, назначенных контроллером горизонтально масштабируемого слоя, не будет отклонен. Также, в рамках модели, все серверы в горизонтально масштабируемом слое считаются одинаково сконфигурированными и имеющими десять потоков.&lt;/p&gt;
&lt;p&gt;В результате моделирования получена таблица, которая содержит значения оптимального количества серверов в горизонтально масштабируемом слое:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Коэффициент деления первичного запроса&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Оптимальное количество серверов в горизонтально масштабируемом слое&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;87&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;149&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Как можно видеть из таблицы, оптимальное количество серверов в горизонтально масштабируемом слое нелинейно зависит от коэффициента изначального запроса. Проведем интерполяцию степенным многочленом. Известно, что через &lt;code&gt;n+1&lt;/code&gt; точек на плоскости можно провести кривую, являющуюся графиком степенного многочлена (полинома) степени n, причем такой полином единственный. Воспользуемся следующей формулой:&lt;/p&gt;
&lt;p&gt;$L(x) =\sum_{i=0}^{n} y_il_i(x)$&lt;/p&gt;
&lt;p&gt;$l_i(x) = \prod_{{j=0},{j\neq i}}^{n} {(x-x_j) \over x_i-x_j}$&lt;/p&gt;
&lt;p&gt;За $x_i$ примем коэффициент деления первичного запроса, за $y_i$ – оптимальное количество серверов в горизонтально масштабируемом слое при заданной величине коэффициента деления первичного запроса.&lt;/p&gt;
&lt;p&gt;Подставив значения в формулы получаем следующую зависимость:
$f(x) = 1.76571 *  10^{-8}x^3 - 0.0000767385x^2 + 0.208204x − 0.122419 $, где $x$ это количество запросов, на которые будет разделен первичный запрос, а $f(x)$ - количество серверов, которое потребуется, чтобы все запросы были обработаны. Убедимся в корректности полученной для модели формулы на точках, не участвовавших в выявлении зависимости. Так, при разделении первичного запроса на 25 подзапросов получаем:&lt;/p&gt;
&lt;p&gt;$ 1.76571 * 10^{−8}x^3 − 0.0000767385x^2 + 0.208204x − 0.122419 ≈ 5.035$&lt;/p&gt;
&lt;p&gt;Проведя моделирование при наличии пяти серверов, получающих задания от контролера горизонтально масштабированного слоя, убеждаемся в том, что модель работает корректно и все запросы были обработаны. При расщеплении изначального запроса на 127 запросов получаем:&lt;/p&gt;
&lt;p&gt;$1.76571 * 10^{−8}x^3 − 0.0000767385x^2 + 0.208204x − 0.122419 ≈ 25.1179. $
Проведя моделирование на двадцати пяти серверах, получающих задания от контролера горизонтально масштабированного слоя, убеждаемся в том, что модель работает корректно и все запросы были обработаны.&lt;/p&gt;
&lt;p&gt;Таким образом, в работе построена аппроксимирующая функция для системы агрегирования информации и математическая зависимость коэффициента деления первоначального запроса и количества серверов в горизонтально масштабируемом слое, необходимого для их обработки. Использование данной модели и математической зависимости позволит оценить устойчивость подобных систем к заявленным нагрузкам до непосредственного введения их в эксплуатацию.&lt;/p&gt;
&lt;p&gt;Список литературы&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Косяков М.С. Введение в распределенные вычисления / Учебное пособие. – Санкт-Петербург: НИУ ИТМО, 2014. - 155 с.&lt;/li&gt;
&lt;li&gt;Радченко Г.И. Распределенные вычислительные системы / Г.И. Радченко. – Челябинск:Фотохудожник, 2012. – 184 с.&lt;/li&gt;
&lt;li&gt;Шамакина А. В. Обзор технологий распределенных вычислений // Вестник ЮУрГУ. Серия: Вычислительная математика и информатика. 2014. №3 С.51-85.&lt;/li&gt;
&lt;li&gt;Baker M., Buyya R., Laforenza D. Grids and Grid Technologies for Wide–area Distributed Computing // Journal of Software-Practice &amp;amp; Experience. 2002. Vol. 32, No. 15. P. 1437–1466&lt;/li&gt;
&lt;li&gt;Benslimane D., Dustdar S., Sheth A. Services Mashups: The New Generation of Web Applications // IEEE Internet Computing. 2008. Vol. 12. doi: 10.1109/MIC.2008.110&lt;/li&gt;
&lt;li&gt;Help - AnyLogic Simulation Software [Электронный ресурс] / triangular. – &lt;a href=&#34;https://help.anylogic.ru/index.jsp?topic=%2Fcom.anylogic.help%2Fhtml%2Ffunctions%2Ftriangular.html&#34;&gt;https://help.anylogic.ru/index.jsp?topic=%2Fcom.anylogic.help%2Fhtml%2Ffunctions%2Ftriangular.html&lt;/a&gt; (дата обращения: 20.12.2017)&lt;/li&gt;
&lt;/ol&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Нейро-компьютерный интерфейс как глобальный двигатель прогресса</title>
      <link>https://it-irokez.ru/articles/nci/</link>
      <pubDate>Tue, 11 Nov 2014 22:12:34 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/nci/</guid>
      <description>Нейро-компьютерный интерфейс (НКИ) (называемый также прямой нейронный интерфейс, мозговой интерфейс, интерфейс «мозг — компьютер») – устройство или принцип работы, предназначенный для обеспечения односторонней или двухсторонней связи между мозгом и электронным устройством.
Другими словами, НКИ - это некоторый механизм, позволяющий управлять техникой с помощью &amp;quot; силы мысли&amp;quot;. Исследования этой области начались в 1970-х годах в Калифорнийском университете в Лос-Анджелесе (UCLA). В середине 1990-х были разработаны устройства, которые позволили восстановить поврежденные функции слуха, зрения, а также утраченные двигательные навыки.</description>
      <turbo:content>&lt;p&gt;&lt;strong&gt;Нейро-компьютерный интерфейс&lt;/strong&gt; (НКИ) (называемый также прямой нейронный интерфейс, мозговой интерфейс, интерфейс «мозг — компьютер») – устройство или принцип работы, предназначенный для обеспечения односторонней или двухсторонней связи между мозгом и электронным устройством.&lt;/p&gt;
&lt;p&gt;Другими словами, НКИ - это некоторый механизм, позволяющий управлять техникой с помощью &amp;quot; силы мысли&amp;quot;. Исследования этой области  начались в 1970-х годах в Калифорнийском университете в Лос-Анджелесе (UCLA). В середине 1990-х были разработаны устройства, которые позволили восстановить поврежденные функции слуха, зрения, а также утраченные двигательные навыки.&lt;/p&gt;
&lt;p&gt;Одной из главных причин, по которой НКИ станет катализатором научно-технического прогресса, является широкая область применимости данной технологии.
&lt;img src=&#34;https://it-irokez.ru/assets/brain.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Одно из самых перспективных направлений развития НКИ является медицина. НКИ позволит создавать протезы с высокой отзывчивостью, манипулировать подобного рода протезами можно будет наравне с здоровыми органами. Вопросами создания и имплантирования различных искусственных устройств для восстановления нарушений функций нервной системы и сенсорных органов занимается область неврологии –  нейропротезирование. Самым распространенным нейропротезом является кохлеарный имплантат, который используется для компенсирования потери слуха некоторым пациентам с выраженной или тяжёлой степенью нейросенсорной (сенсоневральной) тугоухости.&lt;/p&gt;
&lt;p&gt;Однако медицинские НКИ могут найти применение не только в медицине. На основе технологий нейропротезирования в последствии возможно создание систем управления гуманоидными роботами. Так, например, в 2000-ом году, исследовательской  группе Мигеля Николесиса удалось воспроизвести движение передних конечностей обезьяны. Система работала в реальном времени и использовалась для управления роботом по средствам интернет соединения. На практике  подобного рода роботы могут быть использованы при высокоточных работах, в местах, где прибывание человека невозможно. Так же, как и в случае с нейропротезами, НКИ позволит обеспечить более высокую точность и отзывчивость, что в значительной степени повысит эффективность работы оператора.&lt;/p&gt;
&lt;p&gt;Развитие НКИ в сторону распознания мыслительных образов должно дать мощный толчек в развитии областей, связанных с моделированием и проектированием. НКИ позволит в значительной степени ускорить и упростить процесс создания моделей и чертежей. Ощутимый прогресс в данном направлении имеет группа NeuroG; группа занимается созданием алгоритмов для распознания зрительных образов, а 25 апреля 2011 года состоялась первая публичная демонстрация работы устройства по распознанию мыслительных образов. К сожалению, на тот момент, устройство распознавало только 4 изображения.&lt;/p&gt;
&lt;p&gt;Следующий способ практического применения НКИ трудно отнести к какой либо конкретной области. Речь идет о хранении и передачи знаний и опыта. Развитие НКИ в данном направлении позволит сократить длительность обучения, а также позволит создавать продвинутые базы знаний, которые будут включать в себя опыт и знания других специалистов в данной предметной области. Сама возможность использования НКИ для передачи опыта была подтверждена Мигелем Николелисом и Михаилом Лебедевым с коллегами из отдела нейробиологи университета Дьюка (США). Ими была опубликована научная работа с описанием первого в мире интерфейса для передачи сигналов из мозга в мозг через интернет. В процессе эксперимента первая крыса (кодер) в университете Дюка осуществляла сенсомоторные задачи, требующие выбора из двух вариантов с использованием тактильных или визуальных стимулов. В процессе выполнения кодером задачи образцы мозговой активности передавались в соответствующие области мозга второй крысы (декодера) с помощью интракортикальных стимуляций (ICMS). При этом крыса-декодер физически находилась в Бразилии.&lt;/p&gt;
&lt;p&gt;Так как работа НКИ связана с непосредственным воздействием на нервную систему человека, наиболее вероятным способом организации двусторонней связи человека с компьютером будет имплантирование модуля способного перехватывать, принимать (при необходимости обрабатывать) и передавать сигналы нервной системы.&lt;/p&gt;
&lt;p&gt;Согласно опросу, проведенному в интернете, 72% опрошенных считают, что НКИ окажут положительное влияние на развитие науки-техники и жизни  целом, 10% ответили отрицательно, 18% затруднились дать ответ на вопрос, однако на вопрос о согласии на имплантирование модуля, позволяющего использовать НКИ, положительно ответили только 35%, 24% ответили отказом, 32% затруднились дать ответ, 9% предложили свои варианты. В результате беседы с респондентами были выявлены основные причины, по которым люди затруднились ответить или дали отрицательный ответ:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Не желание людей становится &amp;lsquo;&amp;lsquo;киборгами&amp;rsquo;&amp;rsquo;, т. е. модифицировать свое тело искусственным способом;&lt;/li&gt;
&lt;li&gt;Страх потерять свободу воли и стать подконтрольным хакеру.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;список-литературы&#34;&gt;Список литературы&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Староха А. В., Давыдов А. В.&lt;/em&gt; Кохлеарная имплантация — перспективное направление слухопротезирования//Бюллетень сибирской медицины.— 2004.— №4.— С.34—38&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Carmena, J.M., Lebedev, M.A., Crist, R.E., O’Doherty, J.E., Santucci, D.M., Dimitrov, D.F., Patil, P.G., Henriquez, C.S., Nicolelis, M.A.L. (2003)&lt;/em&gt; Learning to control a brain-machine interface for reaching and grasping by primates. PLoS Biology, 1: 193—208.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Еникеева, Альфия&lt;/em&gt; «Российские учёные научат компьютер читать мысли», «Наука и технологии России»,  2011-04-27&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Miguel Pais-Vieira, Mikhail Lebedev, Jing Wang , Miguel A. L. Nicolelis&lt;/em&gt; «A Brain-to-Brain Interface for Real-Time Sharing of Sensorimotor Information» , 2013-02-28&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</turbo:content>
    </item>
    
  </channel>
</rss>