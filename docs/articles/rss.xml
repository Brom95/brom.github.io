<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Статьи on Ирокезнутый блог</title>
    <link>https://it-irokez.ru/articles/</link>
    <description>Recent content in Статьи on Ирокезнутый блог</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Sun, 25 Sep 2022 20:25:57 +0300</lastBuildDate><atom:link href="https://it-irokez.ru/articles/rss.xml" rel="self" type="application/rss+xml" />
    <item turbo="true">
      <title>Сравнение в C#</title>
      <link>https://it-irokez.ru/articles/comparer/</link>
      <pubDate>Sat, 20 Nov 2021 17:23:23 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/comparer/</guid>
      <description>Предисловие Автор знает, как работает сравнение в C#, достаточно четко представляет разницу между семантикой значимого и ссылочного типов, однако все еще находит эту статью хорошей и позволяющей чуть глубже заглянуть под капот.
Думаю, что каждый программист рано или поздно сталкивается с кодом, который работает «не так, как ты от него ожидаешь». Именно это и подтолкнуло меня к написанию следующей статьи, в которой я пытаюсь понять, почему Except в Linq работает так, как написан, а не так, как я хочу.</description>
      <turbo:content>&lt;h2 id=&#34;предисловие&#34;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Автор знает, как работает сравнение в C#, достаточно четко представляет разницу между семантикой значимого и ссылочного типов, однако все еще находит эту статью хорошей и позволяющей чуть глубже заглянуть под капот.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Думаю, что каждый программист рано или поздно сталкивается с кодом, который работает «не так, как ты от него ожидаешь». Именно это и подтолкнуло меня к написанию следующей статьи, в которой я пытаюсь понять, почему Except в Linq работает так, как написан, а не так, как я хочу.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Что, по вашему мнению, должен вывести следующий код:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] FirstDirrectoryFiles = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] SecondDirrectoryFiles = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; FirstDirrectoryFiles.Except(SecondDirrectoryFiles))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(item.Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Я вот предположил, что ничего, потому что Except должен вычитать множество (IEnumerable) правого аргумента из множества (IEnumerable) левого аргумента. Однако, вопреки моим ожиданиям я получил:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вне всякого сомнения — это не похоже на пустое множество. Давайте попробуем разобраться в том, почему так получается (результат в .NET 5 и в .NET 6 — эквивалентен). Чтобы понять, почему так происходит, и что можно с этим сделать обратимся к документации метода &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/api/system.linq.enumerable.except?view=net-6.0&#34;&gt;Except&lt;/a&gt;. Там действительно написано, что этот метод «Находит разность множеств, представленных двумя последовательностями» и имеет две перегрузки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Except&amp;lt;TSource&amp;gt;(IEnumerable&amp;lt;TSource&amp;gt;, IEnumerable&amp;lt;TSource&amp;gt;)&lt;/code&gt; Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Except&amp;lt;TSource&amp;gt;(IEnumerable&amp;lt;TSource&amp;gt;, IEnumerable&amp;lt;TSource&amp;gt;, IEqualityComparer&amp;lt;TSource&amp;gt;)&lt;/code&gt;. Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор IEqualityComparer&lt;!-- raw HTML omitted --&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Обратите внимание на заявление о том, что для сравнения используется компаратор по умолчанию. Чтобы понять, почему наш код сработал именно так, как сработал, нам предстоит разобраться с поведением компаратора по умолчанию. Для этого я предлагаю проследовать на &lt;a href=&#34;https://github.com/dotnet/runtime/&#34;&gt;https://github.com/dotnet/runtime/&lt;/a&gt; и проанализировать работу метода Except.&lt;/p&gt;
&lt;p&gt;Наша &lt;a href=&#34;https://github.com/dotnet/runtime/blob/a7c69745a4e22757c69f65d2a750e2d6923e1186/src/libraries/System.Linq/src/System/Linq/Except.cs#L10&#34;&gt;точка входа&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; Except&amp;lt;TSource&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; first, IEnumerable&amp;lt;TSource&amp;gt; second)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (first == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.first);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (second == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.second);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ExceptIterator(first, second, &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Метод проверяет, что получил два объекта с ненулевым указателем и передает аргументы в &lt;a href=&#34;https://github.com/dotnet/runtime/blob/a7c69745a4e22757c69f65d2a750e2d6923e1186/src/libraries/System.Linq/src/System/Linq/Except.cs#L79&#34;&gt;ExceptIterator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Строго говоря, можно было бы использовать и метод перегрузку, так как он работает буквально также:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; Except&amp;lt;TSource&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; first, IEnumerable&amp;lt;TSource&amp;gt; second, IEqualityComparer&amp;lt;TSource&amp;gt;? comparer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (first == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.first);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (second == &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.second);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ExceptIterator(first, second, comparer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Почему перегрузка, а не параметр по умолчанию? Силами &lt;a href=&#34;https://t.me/dotnettalks&#34;&gt;сообщества&lt;/a&gt; было вынесено предположение, что дело в &lt;a href=&#34;https://coding.abel.nu/2014/07/adding-an-overload-is-a-breaking-change/&#34;&gt;этом&lt;/a&gt; и &lt;a href=&#34;https://rules.sonarsource.com/csharp/RSPEC-2360&#34;&gt;этом&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Собственно код &lt;a href=&#34;https://github.com/dotnet/runtime/blob/a7c69745a4e22757c69f65d2a750e2d6923e1186/src/libraries/System.Linq/src/System/Linq/Except.cs#L79&#34;&gt;ExceptIterator&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; IEnumerable&amp;lt;TSource&amp;gt; ExceptIterator&amp;lt;TSource&amp;gt;(IEnumerable&amp;lt;TSource&amp;gt; first, IEnumerable&amp;lt;TSource&amp;gt; second, IEqualityComparer&amp;lt;TSource&amp;gt;? comparer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;TSource&amp;gt;(second, comparer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (TSource element &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; first)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;set&lt;/span&gt;.Add(element))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; element;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Из элементов второго аргумента создается &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/HashSet.cs#L55&#34;&gt;множество&lt;/a&gt;. Элементы первого аргумента, которые удалось добавить в множество, возвращаются в качестве итератора.&lt;/p&gt;
&lt;p&gt;Конструктор множества принимает интерфейс компаратора, который используется для сравнения элементов множества:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Конкретно в нашем случае компаратор равен null, поэтому проваливаемся в свойство Default обобщенного класса EqualityComparer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; HashSet(IEqualityComparer&amp;lt;T&amp;gt;? comparer)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (comparer &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; not &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; comparer != EqualityComparer&amp;lt;T&amp;gt;.Default) &lt;span style=&#34;color:#75715e&#34;&gt;// first check for null to avoid forcing default comparer instantiation unnecessarily&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        _comparer = comparer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Special-case EqualityComparer&amp;lt;string&amp;gt;.Default, StringComparer.Ordinal, and StringComparer.OrdinalIgnoreCase.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// We use a non-randomized comparer for improved perf, falling back to a randomized comparer if the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// hash buckets become unbalanced.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T) == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;? stringComparer = NonRandomizedStringEqualityComparer.GetStringComparer(_comparer);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (stringComparer &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; not &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            _comparer = (IEqualityComparer&amp;lt;T&amp;gt;?)stringComparer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/EqualityComparer.CoreCLR.cs#L10&#34;&gt;Тут&lt;/a&gt;, на мой скромный взгляд, все очевидно:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;EqualityComparer&lt;/span&gt;&amp;lt;T&amp;gt; : IEqualityComparer, IEqualityComparer&amp;lt;T&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// To minimize generic instantiation overhead of creating the comparer per type, we keep the generic portion of the code as small&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// as possible and define most of the creation logic in a non-generic class.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EqualityComparer&amp;lt;T&amp;gt; Default { [Intrinsic] &lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;; } = (EqualityComparer&amp;lt;T&amp;gt;)ComparerHelpers.CreateDefaultEqualityComparer(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(T));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Комментарий гласит, что с целью минимизации накладных расходов на создание универсального экземпляра для каждого типа код обобщенных классов уменьшают насколько это возможно за счет переноса его логики в необобщенный класс (в нашем случае это ComparerHelpers).&lt;/p&gt;
&lt;p&gt;Давайте же посмотрим на то, как &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/ComparerHelpers.cs#L116&#34;&gt;происходит процесс создания компаратора по умолчанию&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt; CreateDefaultEqualityComparer(Type type)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Debug.Assert(type != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; type &lt;span style=&#34;color:#66d9ef&#34;&gt;is&lt;/span&gt; RuntimeType);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;object?&lt;/span&gt; result = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; runtimeType = (RuntimeType)type;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Specialize for byte so Array.IndexOf is faster.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ByteEqualityComparer();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Specialize for string, as EqualityComparer&amp;lt;string&amp;gt;.Default is on the startup path&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GenericEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.IsAssignableTo(&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(IEquatable&amp;lt;&amp;gt;).MakeGenericType(type)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// If T implements IEquatable&amp;lt;T&amp;gt; return a GenericEqualityComparer&amp;lt;T&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result = CreateInstanceForAnotherGenericParameter((RuntimeType)&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(GenericEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&amp;gt;), runtimeType);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.IsGenericType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Nullable does not implement IEquatable&amp;lt;T?&amp;gt; directly because that would add an extra interface call per comparison.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Instead, it relies on EqualityComparer&amp;lt;T?&amp;gt;.Default to specialize for nullables and do the lifted comparisons if T implements IEquatable.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.GetGenericTypeDefinition() == &lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(Nullable&amp;lt;&amp;gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result = TryCreateNullableEqualityComparer(runtimeType);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (type.IsEnum)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// The equality comparer for enums is specialized to avoid boxing.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        result = TryCreateEnumEqualityComparer(runtimeType);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; result ?? CreateInstanceForAnotherGenericParameter((RuntimeType)&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt;(ObjectEqualityComparer&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;&amp;gt;), runtimeType);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Пойдем по порядку:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Если тип аргумента byte, то возвращается компаратор специально для этого типа (ByteEqualityComparer)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если это строка, то возвращается GenericEqualityComparer&lt;!-- raw HTML omitted --&gt;();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если тип реализует IEquatable, то на основе GenericEqualityComparer&lt;!-- raw HTML omitted --&gt; возвращается GenericEqualityComparer для типа аргумента (даже не спрашивайте);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если аргумент является универсальным типом (обобщением) и если этот универсальный тип Nullable&amp;lt;&amp;gt;,  &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/ComparerHelpers.cs#L160&#34;&gt;то на основе&lt;/a&gt; NullableEqualityComparer&lt;!-- raw HTML omitted --&gt;  создается NullableEqualityComparer для типа аргумента;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если аргумент – перечисление, &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/coreclr/System.Private.CoreLib/src/System/Collections/Generic/ComparerHelpers.cs#L179&#34;&gt;то на основе&lt;/a&gt; EnumEqualityComparer&amp;lt;&amp;gt; создается EnumEqualityComparer;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Во всех остальных случаях на основе ObjectEqualityComparer&lt;!-- raw HTML omitted --&gt; создается ObjectEqualityComparer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;С помощью такого нехитрого кода (хотел было переписать через string builder, но, думаю, тут можно забить :D) попробуем понять, какой же из перечисленных случаев – наш:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result1 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result2 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type type = result1[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;].GetType();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Console.Write(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type == typeof(byte): {type == typeof(byte)}\n&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type == typeof(string): {type == typeof(string)}\n&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type.IsAssignableTo(typeof(IEquatable&amp;lt;&amp;gt;).MakeGenericType(type)): {type.IsAssignableTo(typeof(IEquatable&amp;lt;&amp;gt;).MakeGenericType(type))}\n&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type.IsGenericType: {type.IsGenericType}\n&amp;#34;&lt;/span&gt; +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;$&amp;#34;type.IsEnum: {type.IsEnum}\n\n&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Что и следовало ожидать:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/comparer_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Это значит, что теперь наш путь лежит в &lt;a href=&#34;https://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/EqualityComparer.cs&#34;&gt;ObjectEqualityComparer&lt;/a&gt;. Вот, собственно, и он:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sealed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;partial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ObjectEqualityComparer&lt;/span&gt;&amp;lt;T&amp;gt; : EqualityComparer&amp;lt;T&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [MethodImpl(MethodImplOptions.AggressiveInlining)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals(T? x, T? y)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (x != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x.Equals(y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (y != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;    [MethodImpl(MethodImplOptions.AggressiveInlining)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode([DisallowNull] T obj) =&amp;gt; obj?.GetHashCode() ?? &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Equals method for the comparer itself.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; Equals([NotNullWhen(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)] &lt;span style=&#34;color:#66d9ef&#34;&gt;object?&lt;/span&gt; obj) =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        obj != &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; GetType() == obj.GetType();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; GetHashCode() =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        GetType().GetHashCode();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ObjectEqualityComparer определяет метод Equals для двух объектов следующим образом:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Объекты равны, если они оба null (что логично);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Объекты не равны, если только один из них null;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если оба объекта не null, то их эквивалентность определяется методом Equals «левого» аргумента.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если обратиться к &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/api/system.io.fileinfo?view=net-6.0#methods&#34;&gt;документации&lt;/a&gt;, то можно увидеть, что у нашего класса FileInfo действительно есть метод Equals с пометкой «Унаследовано от Object». Что же, &lt;a href=&#34;https://docs.microsoft.com/ru-ru/dotnet/api/system.object.equals?view=net-6.0#System_Object_Equals_System_Object_&#34;&gt;туда&lt;/a&gt; и лежит наш путь! Там в секции «комментарии» мы можем узнать, что:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Если текущий экземпляр является ссылочным типом, Equals(Object) метод проверяет равенство ссылок, а вызов Equals(Object) метода эквивалентен вызову ReferenceEquals метода. Равенство ссылок означает, что сравниваемые объектные переменные ссылаются на один и тот же объект.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;На этом, казалось, можно было бы завершить наше путешествие, но давайте на последок придумаем, как заставить Except перестать показывать файлы в директории с моими документами.&lt;/p&gt;
&lt;p&gt;Вариант из категории «пока так, потом пофикшу»:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result1 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result2 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 .Select(i =&amp;gt; i.FullName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 .Except(result2.Select(i =&amp;gt; i.FullName))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 .Select(i =&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; FileInfo(i)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(item.Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Мы, по сути, вызываем Except для двух IEnumerate&lt;!-- raw HTML omitted --&gt;, а потом из результата снова собираем IEnumerate&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;В свежем .net6 еще можно воспользоваться &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.exceptby?view=net-6.0&#34;&gt;ExceptBy&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result1 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result2 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result1.ExceptBy(result2.Select(i =&amp;gt; i.FullName), ks =&amp;gt; ks.FullName))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(item.Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Этот код уже выглядит приятнее и даже избавляет нас от необходимости разбирать и снова собирать изначальный массив, но можно сделать это иначе.&lt;/p&gt;
&lt;p&gt;Следующей идеей, посетившей мою голову, было унаследовать FileInfo и переопределить Equals, но, к сожалению, FileInfo является запечатанным (sealed) классом, а это значит, что он не может быть унаследован, так что этот путь нам отрезан.&lt;/p&gt;
&lt;p&gt;Подойдем к вопросу с другой стороны. Вспомним, что Equals имеет перегрузку, принимающую вторым аргументом IEqualityComparer, что позволяет нам создать что-то вроде такого решения:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; documentsDir = &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result1 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInfo[] result2 = documentsDir.GetFiles();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; (FileInfo item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; result1.Except(result2, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; CustomFileInfoComparer()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Console.WriteLine(item.Name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CustomFileInfoComparer&lt;/span&gt; : IEqualityComparer&amp;lt;FileInfo&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; IEqualityComparer&amp;lt;FileInfo&amp;gt;.Equals(FileInfo? lhv, FileInfo? rhv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       =&amp;gt; lhv?.FullName == rhv?.FullName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; IEqualityComparer&amp;lt;FileInfo&amp;gt;.GetHashCode(FileInfo obj) =&amp;gt; obj.FullName.GetHashCode();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Это решение хорошо подходит в том случае, если дальше по коду вам предстоит еще хотя бы раз сравнивать IEnumerable&lt;!-- raw HTML omitted --&gt;.&lt;/p&gt;
&lt;p&gt;На этом у меня все, надеюсь, что читатель нашел любопытным мой скромный труд.&lt;/p&gt;
&lt;p&gt;Хочется выразить огромную благодарность моей жене за помощь в подготовке данного поста, а также сообществу &lt;a href=&#34;https://t.me/dotnettalks&#34;&gt;.NET Talks&lt;/a&gt;&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Гри-Гри для JWT</title>
      <link>https://it-irokez.ru/articles/grigri/</link>
      <pubDate>Tue, 19 May 2020 19:33:19 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/grigri/</guid>
      <description>Оригинальная публикация
Гри-гри — талисман вуду или амулет для защиты владельца от зла или на счастье.
JWT (JSON Web Token) – это токен, а будет этот токен хорошим или плохим, зависит исключительно от вашей реализации. Структура JWT определена в соответствующем RFC , но если кратко, то JWT состоит из трех частей: заголовка (header), полезной нагрузки (payload) и подписи или данных шифрования. Заголовок и нагрузка представляют собой JSON-объекты “определенной” структуры, а третья часть – это зачастую подпись первой и второй частей.</description>
      <turbo:content>&lt;p&gt;&lt;a href=&#34;https://dc7495.org/gris-gris-for-jwt/&#34;&gt;Оригинальная публикация&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Гри-гри&lt;/strong&gt; — талисман вуду
или амулет для защиты
владельца от зла или на счастье.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JWT&lt;/strong&gt; (JSON Web Token) – это токен, а будет этот токен хорошим или плохим, зависит исключительно от вашей реализации. Структура JWT определена в &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;соответствующем RFC&lt;/a&gt; , но если кратко, то JWT состоит из трех частей: заголовка (header), полезной нагрузки (payload) и подписи или данных шифрования. Заголовок и нагрузка представляют собой JSON-объекты “определенной” структуры, а третья часть – это зачастую подпись первой и второй частей. Если верить Википедии, то чаще всего вам придется сталкиваться с тем, что по науке называется JWS/JWE Compact Serialization, т.е. “компактная” версия токена. От развернутой она отличается тем, что заголовок и нагрузка кодируются в base64url, записываются через точку, после чего получившуюся строку подписывают, тоже кодируют в base64url и дописывают в конец снова через разделитель “точка”. Т.е. на выходе получается что-то вроде:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NSIsIm5hbWUiOiJKb2huIEdvbGQiLCJhZG1pbiI6dHJ1ZX0K.LIHjWCBORSWMEibq-tnT8ue_deUqZx1K0XxCOXZRrBI&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Теперь чуть подробнее про каждую из частей, начнем, что называется, с головы. В заголовке указывается необходимая информация для описания самого токена.&lt;/p&gt;
&lt;p&gt;Обязательный ключ здесь только один:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alg: алгоритм, используемый для подписи/шифрования (в случае не подписанного JWT используется значение «none»).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Необязательные ключи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typ: тип токена (type). Используется в случае, когда токены смешиваются с другими объектами, имеющими JOSE-заголовки. Должно иметь значение “JWT”.&lt;/li&gt;
&lt;li&gt;cty: тип содержимого (content type). Если в токене помимо зарегистрированных служебных ключей есть пользовательские, то данный ключ не должен присутствовать. В противном случае он должен иметь значение “JWT”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В разделе полезной нагрузки указывается пользовательская информация (например, имя пользователя и уровень его доступа), а также могут быть использованы некоторые служебные ключи. Все они являются необязательными:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iss: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, генерирующей токен (issuer).&lt;/li&gt;
&lt;li&gt;sub: чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, о которой содержится информация в данном токене (subject). Значения с этим ключом должны быть уникальны в контексте стороны, генерирующей JWT.&lt;/li&gt;
&lt;li&gt;aud: массив чувствительных к регистру строк или URI, являющийся списком получателей данного токена. Когда принимающая сторона получает JWT с данным ключом, она должна проверить наличие себя в получателях — иначе проигнорировать токен (audience).&lt;/li&gt;
&lt;li&gt;exp: время в формате Unix Time, определяющее момент, когда токен станет невалидным (expiration).&lt;/li&gt;
&lt;li&gt;nbf: в противовес ключу exp, время в формате Unix Time, определяющее момент, когда токен станет валидным (not before).&lt;/li&gt;
&lt;li&gt;jti: строка, определяющая уникальный идентификатор данного токена (JWT ID).&lt;/li&gt;
&lt;li&gt;iat: время в формате Unix Time, определяющее момент, когда токен был создан. iat и nbf могут не совпадать, например, если токен был создан раньше, чем время, когда он должен стать валидным.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;кейсы&#34;&gt;Кейсы&lt;/h1&gt;
&lt;p&gt;Теперь, когда ты, дорогой читатель, получил базовое представление о том, что такое JWT-токен, я могу перестать копипастить Википедию и заняться разбором проколов, связанных с безопасностью JWT на примере заданий с root-me:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.root-me.org/en/Challenges/Web-Server/JSON-Web-Token-JWT-Introduction&#34;&gt;JSON Web Token (JWT) – Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.root-me.org/en/Challenges/Web-Server/JSON-Web-Token-JWT-Weak-secret&#34;&gt;JSON Web Token (JWT) – Weak secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.root-me.org/en/Challenges/Web-Server/JSON-Web-Token-JWT-Public-key&#34;&gt;JSON Web Token (JWT) – Public key&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;И сразу ссылки на полезные источники, которые позволят вам избежать дальнейшего чтения моей статьи:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sjoerdlangkemper.nl/2016/09/28/attacking-jwt-authentication/&#34;&gt;Attacking JWT authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/101-writeups/hacking-json-web-token-jwt-233fe6c862e6&#34;&gt;Hacking JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;В задании говорится о том, что необходимо авторизоваться под админом, чтобы получить флаг. Точкой входа предстает такая форма:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_1.png&#34; alt=&#34;форма&#34;&gt;&lt;/p&gt;
&lt;p&gt;Так как аккаунта у нас нет, а задание явно направлено на злоупотребление каким-нибудь токеном, попробуем авторизоваться как гость:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_2.png&#34; alt=&#34;guest&#34;&gt;&lt;/p&gt;
&lt;p&gt;И получаем заветный токен в куке:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_3.png&#34; alt=&#34;токен&#34;&gt;&lt;/p&gt;
&lt;p&gt;Хватаем содержимое куки jwt и идем с ним на &lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt; , где и лицезреем следующую картину:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Чутье бывалого проникновенца говорит нам, что необходимо поменять username с guest на admin и переподписать все это дело. Однако HMAC с использованием SHA-256 требует от нас знания некоего секрета, который создатель задания сообщить нам забыл… Да кому вообще нужна эта подпись, сгенерируем себе токен и без нее:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_5.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Заменяем значение куки jwt на полученный токен и надеемся, что программист ресурса не такой крутой профессионал, как мы:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вы великолепны! Вы не зря зовете себя ковбоем клавиатуры!&lt;/p&gt;
&lt;h2 id=&#34;weak-secret&#34;&gt;Weak secret&lt;/h2&gt;
&lt;p&gt;По одному только названию становится понятно, в чем в этот раз будет проблема. Но давайте не будем сильно забегать вперед и для начала поговорим о том, что за “HS256” использовался для подписи сообщения в предыдущем примере. HS256 – это HMAC with SHA-256. Что это значит для нас, простых смертных людей, не обремененных знаниями криптографической магии? Интернет говорит, что HMAC (Hash-based Message Authentication Code) – это код аутентификации сообщения на основе хэширования. Данный вид аутентификации подразумевает наличие у клиента и сервера некоего секретного ключа, который известен только им двоим. Отлично, опытный проникновенец внутри вас наверняка прочитал эту фразу как “это что-то симметричное и его можно сбрутить”. Теперь мы морально готовы приступать к заданию с root-me.&lt;/p&gt;
&lt;p&gt;Поехали. Точка входа в задание одаривает нас JSON-ом следующего содержания:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{     
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s play a small game, I bet you cannot access to my super secret admin section. Make a GET request to /token and use the token you&amp;#39;ll get to try to access /admin with a POST request.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Я, конечно, не уверен, но, кажется, нам необходимо сделать GET-запрос на /token. Оттуда на нас нисходит новый JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Here is your token&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlIjoiZ3Vlc3QifQ.4kBPNf7Y6BrtP-Y3A-vQXPY9jAh_d0E6L4IUjL65CvmEjgdTZyr2ag-TM-glH6EYKGgO3dBYbhblaPQsbeClcw&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Поле role, вероятнее всего, придется сменить с guest на admin, но сразу возникает вопрос валидности подписи. Если же в этом задании вы решите попробовать поменять алгоритм подписи на различные вариации None, то это не сработает. Название челленджа как бы намекает…&lt;/p&gt;
&lt;p&gt;Намекает на то, что можно воспользоваться утилитой типа &lt;a href=&#34;https://github.com/Sjord/jwtcrack&#34;&gt;jwtcrack&lt;/a&gt;  или &lt;a href=&#34;https://github.com/magnumripper/JohnTheRipper&#34;&gt;John the Ripper&lt;/a&gt;  (я так и не понял, как заставить его работать с jwt), которые позволят узнать секрет методом словарного перебора и переподписать себе токен.&lt;/p&gt;
&lt;p&gt;Запускаем jwtcrack:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Фантастика, мы заполучили секрет и теперь можем переписать себе токен:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Его мы засовываем в заголовок Authorization (почему-то без Bearer) и получаем ключ этой таски. Можно рассказывать теперь историю этого взлома в баре “Джентльмен неудачник”; историю про сожжение Хром вы, конечно, не затмите, но использовать стойкие ключи научите.&lt;/p&gt;
&lt;h2 id=&#34;public-key&#34;&gt;Public key&lt;/h2&gt;
&lt;p&gt;В этот раз без теоретического введения, с места в карьер, так сказать. В челлендже нам дают три endpoint-а api:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;/key (GET)&lt;/li&gt;
&lt;li&gt;/auth (POST)&lt;/li&gt;
&lt;li&gt;/admin (POST)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;И говорят, чтобы мы всех хакнули.&lt;/p&gt;
&lt;p&gt;Пойдем по порядку и постучим на key:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Как и ожидалось, мы получили ключ… Публичный. Сохраняем его себе куда-нибудь и идем дальше. На /auth нас просят послать свой username в теле запроса. Выполнив требования, получаем:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_11.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вы уже поняли, да? Идем на jwt.io  и смотрим на то, что мы получили:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_12.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Видим RS256, и это печалит. Сразу становится понятно, зачем нам дали публичный ключ. RS – это RSA SHA, а RSA (Rivest-Shamir-Adleman) использует асимметричные ключи. Вы, конечно, можете попробовать способы из предыдущих двух заданий, но они тут не сработают. Зато сработает ход, который в обычных условиях показался бы не самым логичным. Давайте попробуем изменить алгоритм подписи с RS256 на HS256, а в качестве секретного ключа использовать полученный нами ранее публичный ключ.&lt;/p&gt;
&lt;p&gt;Возникает логичный вопрос, а какого черта это вообще должно сработать? Мы надеемся на то, что код расшифровки токена на сервере выглядит как-то так:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_13.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;И все это прекрасно работает, если у нас действительно используется асимметричный алгоритм подписи (в нашем случае RSA SHA-256), но если вместо чего-то асимметричного туда попадает что-то симметричное (HMAC SHA-256), то публичный ключ будет обработан функцией как симметричный ключ и токен будет валиден.&lt;/p&gt;
&lt;p&gt;Дальше придется произвести пляски с бубном, которые бы не пришлось проводить будь версия pyjwt не такой свежей. Связано это с тем, что свежие версии pyjwt не дают использовать публичный ключ в качестве секрета для HS256. Но начнем мы все равно с python:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/gri_14.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Отсюда нам понадобятся заголовок и нагрузка:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;А вот подписывать эти части нам придется самостоятельно.&lt;/p&gt;
&lt;p&gt;Перегоним наш ключ, полученный ранее, в последовательность HEX-ов:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417576773168347477504a6e5a42772b54327743440a59624832556b4d427852672f686b534d6c365a77693259566d37397771723372506433676a7430695a576432724e42337175644b5749536d42516132517152480a74503666546a6569354d413471734c53586c32724765576a47767471704851446d63583447417841454b7947306e6632445065324170454330323152472f564f0a64595343414149702b536d6443746d35504966314153694f4141585537644c37324959736f63534d6759705249634a755a5341435571314a367775553958796c0a7042314e7657774644334659437a72655435416b5469636276676546316b39792f4f4b5431667632626e5347706a354b4d45462f51575552377877337262516b0a796e6365436a714645744c78584873584a506d5536676a4132494377547131475671435a447a6a6a665162426f4b7a6d59534f774c7a4f6e364a6237454f50670a58514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;А теперь самостоятельно, как взрослые мальчики, подпишем себе токен:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo -n &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0&amp;#34;&lt;/span&gt; | openssl dgst -sha256 -mac HMAC -macopt hexkey: 2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417576773168347477504a6e5a42772b54327743440a59624832556b4d427852672f686b534d6c365a77693259566d37397771723372506433676a7430695a576432724e42337175644b5749536d42516132517152480a74503666546a6569354d413471734c53586c32724765576a47767471704851446d63583447417841454b7947306e6632445065324170454330323152472f564f0a64595343414149702b536d6443746d35504966314153694f4141585537644c37324959736f63534d6759705249634a755a5341435571314a367775553958796c0a7042314e7657774644334659437a72655435416b5469636276676546316b39792f4f4b5431667632626e5347706a354b4d45462f51575552377877337262516b0a796e6365436a714645744c78584873584a506d5536676a4132494377547131475671435a447a6a6a665162426f4b7a6d59534f774c7a4f6e364a6237454f50670a58514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Наша подпись:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f4a3602e56b0b5d07229d66130ef0aedd1d338cbdc543641d0bb8bedaf8f65ba&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Но не спешите подставлять ее в наш токен. Вы ведь помните, что подпись должна быть base64url? Кодируем:&lt;/p&gt;
&lt;p&gt;Но не спешите подставлять ее в наш токен. Вы ведь помните, что подпись должна быть base64url? Кодируем:&lt;/p&gt;
&lt;p&gt;Получаем:&lt;/p&gt;
&lt;p&gt;9KNgLlawtdByKdZhMO8K7dHTOMvcVDZB0LuL7a-PZbo&lt;/p&gt;
&lt;p&gt;Собираем токен в кучу:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.9KNgLlawtdByKdZhMO8K7dHTOMvcVDZB0LuL7a-PZbo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Засовываем в заголовок Authorization: Bearer и хвастаемся еще одним успешным взломом.&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>ПОСТРОЕНИЕ СИСТЕМЫ АГРЕГИРОВАНИЯ ИНФОРМАЦИИ</title>
      <link>https://it-irokez.ru/articles/agregate/</link>
      <pubDate>Tue, 01 May 2018 00:00:59 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/agregate/</guid>
      <description>Оригинал статьи. Статья была написана в рамках моего обучения в магистратуре.
В современном мире, где объемы данных, поступающие в информационные системы, имеют тенденцию к постоянному росту, а отдельное клиентское устройство зачастую не способно совершать выборку и обработку всех необходимых данных режиме реального времени, вопрос построения систем агрегирования информации встает все более остро.
Что же представляет из себя система агрегирования информации в сети Интернет? Согласно [4], система агрегации это способ создания новых web-приложений за счет объединения уже существующих интернетресурсов.</description>
      <turbo:content>&lt;p&gt;&lt;a href=&#34;http://journal.tc22.ru/wp-content/uploads/2018/05/postroenie_sistemi_agregirovaniya_informacii.pdf&#34;&gt;Оригинал статьи&lt;/a&gt;. Статья была написана в рамках моего обучения в магистратуре.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;В современном мире, где объемы данных, поступающие в информационные системы, имеют тенденцию к постоянному росту, а отдельное клиентское устройство зачастую не способно совершать выборку и обработку всех необходимых данных режиме реального времени, вопрос построения систем агрегирования информации встает все более остро.&lt;/p&gt;
&lt;p&gt;Что же представляет из себя система агрегирования информации в сети Интернет? Согласно [4], система агрегации это способ создания новых web-приложений за счет объединения уже существующих интернетресурсов.&lt;/p&gt;
&lt;p&gt;Зачастую, подобного рода системы проектируются как горизонтально масштабируемые системы [1] и служат надстройкой над API некоторых web-сервисов с целью получения больших выборок данных за время меньшее, чем если бы это делалось средствами отдельно взятого устройства [5]. Под масштабируемостью принято понимать способность системы увеличивать свою производительность при добавлении в систему ресурсов.&lt;/p&gt;
&lt;p&gt;Различают понятия горизонтальной и вертикальной масштабируемости. Вертикальная масштабируемость – способность системы увеличить общую производительность при увеличении производительности отдельных ее элементов. Горизонтальная масштабируемость – способность системы увеличивать производительность при увеличении количества элементов, участвующих в обработке информации [3].&lt;/p&gt;
&lt;p&gt;В данной статье содержатся положения касаемо построения модели взаимодействия компонентов горизонтально масштабируемой системы доступа к удаленным информационным ресурсам в контексте использования данной системы в качестве агрегирующего сервиса. На построенной модели проведено исследование оптимальной конфигурации горизонтально масштабируемого слоя системы. Данный подход позволяет в рамках одной модели отразить как взаимодействие пользователя с данной системой, так и взаимодействие отдельных компонентов системы между собой.&lt;/p&gt;
&lt;p&gt;Системы агрегации информации (в западной технической литературе [4,5] устоялся термин «mashupсистемы») строятся на основе горизонтально масштабируемых систем [2]. В рамках архитектуры «клиентсервер» подобная система может соответствовать архитектуре, представленной на рисунке 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/agregate_1.png&#34; alt=&#34;Рис. 1. Архитектура «клиент-сервер» с горизонтально масштабируемым слоем&#34;&gt;&lt;/p&gt;
&lt;p&gt;Рис. 1. Архитектура «клиент-сервер» с горизонтально масштабируемым слоем&lt;/p&gt;
&lt;p&gt;Один из вариантов архитектуры горизонтально масштабированного слоя представлен на изображении (рис.2). Пользователь формирует абстрактный запрос к контролеру горизонтально масштабированного слоя, затем контролер горизонтально масштабируемого слоя обрабатывает запрос, произведя разложение на некоторое количество подзапросов (в случае необходимо), которые могут быть удовлетворены API сервиса и переданы в виде задач другим серверам системы. Связанные с контролером серверы выполняют запрос к удаленному серверу и, получив ответ, передают его контролеру горизонтально масштабируемого слоя, который объединяет ответы, полученные от подчиненных серверов, передает агрегированный результат клиенту.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/agregate_2.png&#34; alt=&#34;Рис. 2. Архитектура горизонтально масштабируемого слоя&#34;&gt;&lt;/p&gt;
&lt;p&gt;Рис. 2. Архитектура горизонтально масштабируемого слоя&lt;/p&gt;
&lt;p&gt;Для выявления устойчивой к заявленным нагрузкам конфигурации горизонтально масштабируемого слоя в среде имитационного моделирования AnyLogic разработана модель, представленная на рисунке 3. Модель представляет собой набор логических элементов. Элемент source выступает в качестве генератора запросов, delay и delay1 используются для моделирования временной задержки. Сущность resourcePool является хранилищем ресурсов (в данном случае количества потоков), сущность seize хранит заданное количество запросов и при достаточном количестве ресурсов, передает запрос далее.&lt;/p&gt;
&lt;p&gt;В случае невозможности обработки запроса, запрос уничтожается в сущности sink. Сущность sink1 также используется для уничтожения запросов, по завершению работы цикла.&lt;/p&gt;
&lt;p&gt;Для моделирования предложена ситуация, когда горизонтально масштабируемый слой используется в качестве сервиса, а интенсивность запросов, заложенная в source, составляет случайное значение согласно треугольному распределению [6] от 1 до 20 с наиболее вероятным значением, составляющим 5 запросов в минуту.&lt;/p&gt;
&lt;p&gt;Моделирование включает три этапа:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Моделирование работы контроллера и удаленного сервера. В рамках этапа моделируется обработка 3 запроса контроллером и удаленным сервером, работа контроллера по разделению первичного запроса. Время на обработку запроса контролером (delay1) и удаленным сервером (delay) заложено как случайное значение согласно треугольному распределению от 0.5 до 5 с наиболее вероятным значением 1 секунда на обработку одного запроса. Блок split используется для моделирования работы контролера по разделению первичного запроса к горизонтально масштабируемому слою на запросы, которые необходимо совершить к API удаленного сервиса. После разделения, оригинальный запрос перемещается в sink.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/agregate_3.png&#34; alt=&#34;Рис. 3. Модель горизонтально масштабируемого слоя как сервиса&#34;&gt;&lt;/p&gt;
&lt;p&gt;Рис. 3. Модель горизонтально масштабируемого слоя как сервиса&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Моделирование работы горизонтально масштабированного слоя. Работа серверов горизонтально
масштабируемого слоя, которым контролер ставит в соответствие задачи, реализуется блоками resourcePool, release и seize. Элемент resourcePool представляет собой набор потоков, доступных в горизонтально масштабируемом слое для запроса к API удаленного сервера и рассчитывается как Servers*10, где Servers это количество серверов в горизонтально масштабируемом слое используемых для решения задач, полученных от контроллера. Каждый сервер обладает потенциалом обработки 10 одновременных потоков, поэтому размер очереди блока seize рассчитывается аналогично.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Моделирование потоков. Освобождение потоков происходит после получения ответа от удаленного сервера. Возвращение ресурсов (свободных потоков) в resourcePool моделируется блоком release. Если блок seize не может обработать поступивший запрос или поместить его в очередь, то запрос поступает в sink2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Для данной модели, приняты следующие допущения: оптимальным количеством серверов считается такое количество серверов в горизонтально масштабируемом слое, при котором не один из запросов, назначенных контроллером горизонтально масштабируемого слоя, не будет отклонен. Также, в рамках модели, все серверы в горизонтально масштабируемом слое считаются одинаково сконфигурированными и имеющими десять потоков.&lt;/p&gt;
&lt;p&gt;В результате моделирования получена таблица, которая содержит значения оптимального количества серверов в горизонтально масштабируемом слое:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Коэффициент деления первичного запроса&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Оптимальное количество серверов в горизонтально масштабируемом слое&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;500&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;87&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;149&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Как можно видеть из таблицы, оптимальное количество серверов в горизонтально масштабируемом слое нелинейно зависит от коэффициента изначального запроса. Проведем интерполяцию степенным многочленом. Известно, что через &lt;code&gt;n+1&lt;/code&gt; точек на плоскости можно провести кривую, являющуюся графиком степенного многочлена (полинома) степени n, причем такой полином единственный. Воспользуемся следующей формулой:&lt;/p&gt;
&lt;p&gt;$L(x) =\sum_{i=0}^{n} y_il_i(x)$&lt;/p&gt;
&lt;p&gt;$l_i(x) = \prod_{{j=0},{j\neq i}}^{n} {(x-x_j) \over x_i-x_j}$&lt;/p&gt;
&lt;p&gt;За $x_i$ примем коэффициент деления первичного запроса, за $y_i$ – оптимальное количество серверов в горизонтально масштабируемом слое при заданной величине коэффициента деления первичного запроса.&lt;/p&gt;
&lt;p&gt;Подставив значения в формулы получаем следующую зависимость:
$f(x) = 1.76571 *  10^{-8}x^3 - 0.0000767385x^2 + 0.208204x − 0.122419 $, где $x$ это количество запросов, на которые будет разделен первичный запрос, а $f(x)$ - количество серверов, которое потребуется, чтобы все запросы были обработаны. Убедимся в корректности полученной для модели формулы на точках, не участвовавших в выявлении зависимости. Так, при разделении первичного запроса на 25 подзапросов получаем:&lt;/p&gt;
&lt;p&gt;$ 1.76571 * 10^{−8}x^3 − 0.0000767385x^2 + 0.208204x − 0.122419 ≈ 5.035$&lt;/p&gt;
&lt;p&gt;Проведя моделирование при наличии пяти серверов, получающих задания от контролера горизонтально масштабированного слоя, убеждаемся в том, что модель работает корректно и все запросы были обработаны. При расщеплении изначального запроса на 127 запросов получаем:&lt;/p&gt;
&lt;p&gt;$1.76571 * 10^{−8}x^3 − 0.0000767385x^2 + 0.208204x − 0.122419 ≈ 25.1179. $
Проведя моделирование на двадцати пяти серверах, получающих задания от контролера горизонтально масштабированного слоя, убеждаемся в том, что модель работает корректно и все запросы были обработаны.&lt;/p&gt;
&lt;p&gt;Таким образом, в работе построена аппроксимирующая функция для системы агрегирования информации и математическая зависимость коэффициента деления первоначального запроса и количества серверов в горизонтально масштабируемом слое, необходимого для их обработки. Использование данной модели и математической зависимости позволит оценить устойчивость подобных систем к заявленным нагрузкам до непосредственного введения их в эксплуатацию.&lt;/p&gt;
&lt;p&gt;Список литературы&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;Косяков М.С. Введение в распределенные вычисления / Учебное пособие. – Санкт-Петербург: НИУ ИТМО, 2014. - 155 с.&lt;/li&gt;
&lt;li&gt;Радченко Г.И. Распределенные вычислительные системы / Г.И. Радченко. – Челябинск:Фотохудожник, 2012. – 184 с.&lt;/li&gt;
&lt;li&gt;Шамакина А. В. Обзор технологий распределенных вычислений // Вестник ЮУрГУ. Серия: Вычислительная математика и информатика. 2014. №3 С.51-85.&lt;/li&gt;
&lt;li&gt;Baker M., Buyya R., Laforenza D. Grids and Grid Technologies for Wide–area Distributed Computing // Journal of Software-Practice &amp;amp; Experience. 2002. Vol. 32, No. 15. P. 1437–1466&lt;/li&gt;
&lt;li&gt;Benslimane D., Dustdar S., Sheth A. Services Mashups: The New Generation of Web Applications // IEEE Internet Computing. 2008. Vol. 12. doi: 10.1109/MIC.2008.110&lt;/li&gt;
&lt;li&gt;Help - AnyLogic Simulation Software [Электронный ресурс] / triangular. – &lt;a href=&#34;https://help.anylogic.ru/index.jsp?topic=%2Fcom.anylogic.help%2Fhtml%2Ffunctions%2Ftriangular.html&#34;&gt;https://help.anylogic.ru/index.jsp?topic=%2Fcom.anylogic.help%2Fhtml%2Ffunctions%2Ftriangular.html&lt;/a&gt; (дата обращения: 20.12.2017)&lt;/li&gt;
&lt;/ol&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Нейро-компьютерный интерфейс как глобальный двигатель прогресса</title>
      <link>https://it-irokez.ru/articles/nci/</link>
      <pubDate>Tue, 11 Nov 2014 22:12:34 +0300</pubDate>
      
      <guid>https://it-irokez.ru/articles/nci/</guid>
      <description>Нейро-компьютерный интерфейс (НКИ) (называемый также прямой нейронный интерфейс, мозговой интерфейс, интерфейс «мозг — компьютер») – устройство или принцип работы, предназначенный для обеспечения односторонней или двухсторонней связи между мозгом и электронным устройством.
Другими словами, НКИ - это некоторый механизм, позволяющий управлять техникой с помощью &amp;quot; силы мысли&amp;quot;. Исследования этой области начались в 1970-х годах в Калифорнийском университете в Лос-Анджелесе (UCLA). В середине 1990-х были разработаны устройства, которые позволили восстановить поврежденные функции слуха, зрения, а также утраченные двигательные навыки.</description>
      <turbo:content>&lt;p&gt;&lt;strong&gt;Нейро-компьютерный интерфейс&lt;/strong&gt; (НКИ) (называемый также прямой нейронный интерфейс, мозговой интерфейс, интерфейс «мозг — компьютер») – устройство или принцип работы, предназначенный для обеспечения односторонней или двухсторонней связи между мозгом и электронным устройством.&lt;/p&gt;
&lt;p&gt;Другими словами, НКИ - это некоторый механизм, позволяющий управлять техникой с помощью &amp;quot; силы мысли&amp;quot;. Исследования этой области  начались в 1970-х годах в Калифорнийском университете в Лос-Анджелесе (UCLA). В середине 1990-х были разработаны устройства, которые позволили восстановить поврежденные функции слуха, зрения, а также утраченные двигательные навыки.&lt;/p&gt;
&lt;p&gt;Одной из главных причин, по которой НКИ станет катализатором научно-технического прогресса, является широкая область применимости данной технологии.
&lt;img src=&#34;https://it-irokez.ru/assets/brain.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Одно из самых перспективных направлений развития НКИ является медицина. НКИ позволит создавать протезы с высокой отзывчивостью, манипулировать подобного рода протезами можно будет наравне с здоровыми органами. Вопросами создания и имплантирования различных искусственных устройств для восстановления нарушений функций нервной системы и сенсорных органов занимается область неврологии –  нейропротезирование. Самым распространенным нейропротезом является кохлеарный имплантат, который используется для компенсирования потери слуха некоторым пациентам с выраженной или тяжёлой степенью нейросенсорной (сенсоневральной) тугоухости.&lt;/p&gt;
&lt;p&gt;Однако медицинские НКИ могут найти применение не только в медицине. На основе технологий нейропротезирования в последствии возможно создание систем управления гуманоидными роботами. Так, например, в 2000-ом году, исследовательской  группе Мигеля Николесиса удалось воспроизвести движение передних конечностей обезьяны. Система работала в реальном времени и использовалась для управления роботом по средствам интернет соединения. На практике  подобного рода роботы могут быть использованы при высокоточных работах, в местах, где прибывание человека невозможно. Так же, как и в случае с нейропротезами, НКИ позволит обеспечить более высокую точность и отзывчивость, что в значительной степени повысит эффективность работы оператора.&lt;/p&gt;
&lt;p&gt;Развитие НКИ в сторону распознания мыслительных образов должно дать мощный толчек в развитии областей, связанных с моделированием и проектированием. НКИ позволит в значительной степени ускорить и упростить процесс создания моделей и чертежей. Ощутимый прогресс в данном направлении имеет группа NeuroG; группа занимается созданием алгоритмов для распознания зрительных образов, а 25 апреля 2011 года состоялась первая публичная демонстрация работы устройства по распознанию мыслительных образов. К сожалению, на тот момент, устройство распознавало только 4 изображения.&lt;/p&gt;
&lt;p&gt;Следующий способ практического применения НКИ трудно отнести к какой либо конкретной области. Речь идет о хранении и передачи знаний и опыта. Развитие НКИ в данном направлении позволит сократить длительность обучения, а также позволит создавать продвинутые базы знаний, которые будут включать в себя опыт и знания других специалистов в данной предметной области. Сама возможность использования НКИ для передачи опыта была подтверждена Мигелем Николелисом и Михаилом Лебедевым с коллегами из отдела нейробиологи университета Дьюка (США). Ими была опубликована научная работа с описанием первого в мире интерфейса для передачи сигналов из мозга в мозг через интернет. В процессе эксперимента первая крыса (кодер) в университете Дюка осуществляла сенсомоторные задачи, требующие выбора из двух вариантов с использованием тактильных или визуальных стимулов. В процессе выполнения кодером задачи образцы мозговой активности передавались в соответствующие области мозга второй крысы (декодера) с помощью интракортикальных стимуляций (ICMS). При этом крыса-декодер физически находилась в Бразилии.&lt;/p&gt;
&lt;p&gt;Так как работа НКИ связана с непосредственным воздействием на нервную систему человека, наиболее вероятным способом организации двусторонней связи человека с компьютером будет имплантирование модуля способного перехватывать, принимать (при необходимости обрабатывать) и передавать сигналы нервной системы.&lt;/p&gt;
&lt;p&gt;Согласно опросу, проведенному в интернете, 72% опрошенных считают, что НКИ окажут положительное влияние на развитие науки-техники и жизни  целом, 10% ответили отрицательно, 18% затруднились дать ответ на вопрос, однако на вопрос о согласии на имплантирование модуля, позволяющего использовать НКИ, положительно ответили только 35%, 24% ответили отказом, 32% затруднились дать ответ, 9% предложили свои варианты. В результате беседы с респондентами были выявлены основные причины, по которым люди затруднились ответить или дали отрицательный ответ:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Не желание людей становится &amp;lsquo;&amp;lsquo;киборгами&amp;rsquo;&amp;rsquo;, т. е. модифицировать свое тело искусственным способом;&lt;/li&gt;
&lt;li&gt;Страх потерять свободу воли и стать подконтрольным хакеру.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;список-литературы&#34;&gt;Список литературы&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Староха А. В., Давыдов А. В.&lt;/em&gt; Кохлеарная имплантация — перспективное направление слухопротезирования//Бюллетень сибирской медицины.— 2004.— №4.— С.34—38&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Carmena, J.M., Lebedev, M.A., Crist, R.E., O’Doherty, J.E., Santucci, D.M., Dimitrov, D.F., Patil, P.G., Henriquez, C.S., Nicolelis, M.A.L. (2003)&lt;/em&gt; Learning to control a brain-machine interface for reaching and grasping by primates. PLoS Biology, 1: 193—208.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Еникеева, Альфия&lt;/em&gt; «Российские учёные научат компьютер читать мысли», «Наука и технологии России»,  2011-04-27&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Miguel Pais-Vieira, Mikhail Lebedev, Jing Wang , Miguel A. L. Nicolelis&lt;/em&gt; «A Brain-to-Brain Interface for Real-Time Sharing of Sensorimotor Information» , 2013-02-28&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</turbo:content>
    </item>
    
  </channel>
</rss>