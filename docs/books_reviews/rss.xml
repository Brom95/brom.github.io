<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Books_reviews on Ирокезнутый блог</title>
    <link>https://alexandrv.ru/books_reviews/</link>
    <description>Recent content in Books_reviews on Ирокезнутый блог</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Sun, 02 Jan 2022 08:33:59 +0300</lastBuildDate><atom:link href="https://alexandrv.ru/books_reviews/rss.xml" rel="self" type="application/rss+xml" />
    <item turbo="true">
      <title>&#34;Head First Паттерны проектирования&#34; Эрика и Элизабет Фримен</title>
      <link>https://alexandrv.ru/books_reviews/head_first_patterns/</link>
      <pubDate>Sun, 02 Jan 2022 08:33:59 +0300</pubDate>
      
      <guid>https://alexandrv.ru/books_reviews/head_first_patterns/</guid>
      <description>Еще одна книга, которую мне следовало прочитать довольно давно (Хотя бы потому что книга издания 2013-го года столько лет лежит у меня на полке). Возможно даже раньше, чем &amp;ldquo;Чистый код&amp;rdquo; Мартина. В книге на простых и понятных примерах из жизни выдуманного города &amp;ldquo;Объектвиля&amp;rdquo; разбирает паттерны:
 Стратегия; Наблюдатель; Декоратор; Фабрика; Одиночка; Команда; Адаптер; Фасад; Шаблонный метод; Итератор; Компоновщик; Состояние; Заместитель.  Примеры в книге написаны на столь горячо любимой фанатами ООП Java, но специфичных именно для Java примеров в книге не так много.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://alexandrv.ru/asserts/images/book_1.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Еще одна книга, которую мне следовало прочитать довольно давно (Хотя бы потому что книга издания 2013-го года столько лет лежит у меня на полке). Возможно даже раньше, чем &amp;ldquo;Чистый код&amp;rdquo; Мартина. В книге на простых и понятных примерах из жизни выдуманного города &amp;ldquo;Объектвиля&amp;rdquo; разбирает паттерны:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Стратегия;&lt;/li&gt;
&lt;li&gt;Наблюдатель;&lt;/li&gt;
&lt;li&gt;Декоратор;&lt;/li&gt;
&lt;li&gt;Фабрика;&lt;/li&gt;
&lt;li&gt;Одиночка;&lt;/li&gt;
&lt;li&gt;Команда;&lt;/li&gt;
&lt;li&gt;Адаптер;&lt;/li&gt;
&lt;li&gt;Фасад;&lt;/li&gt;
&lt;li&gt;Шаблонный метод;&lt;/li&gt;
&lt;li&gt;Итератор;&lt;/li&gt;
&lt;li&gt;Компоновщик;&lt;/li&gt;
&lt;li&gt;Состояние;&lt;/li&gt;
&lt;li&gt;Заместитель.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Примеры в книге написаны на столь горячо любимой фанатами ООП Java, но специфичных именно для Java примеров в книге не так много.
Помимо того, что авторы рассказывают о том, как использовать тот или иной паттерн и как его реализовать, большое внимание уделяется ОО-проектированию как таковому. Из главы в главу перекочевывает постепенно расширяющийся список принципов ОО-проектирования. Именно для того, чтобы в дальнейшем лучше усвоить эти принципы я бы рекомендовал читать эту книгу ПЕРЕД чистым кодом.
В конце книги один из разделов главы посвящен тому, что использование паттернов не решит все ваши проблемы и что не нужно проектировать систему под паттерны. Они должны вписываться в систему органично и желательно не насильственно :D&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Чистый код. Роберт Мартин</title>
      <link>https://alexandrv.ru/books_reviews/clear_code/</link>
      <pubDate>Sun, 05 Dec 2021 08:40:14 +0300</pubDate>
      
      <guid>https://alexandrv.ru/books_reviews/clear_code/</guid>
      <description>Вчера я закончил чтение книги, прочесть которую мне следовало довольно давно. Книга в IT среде популярна настолько, что я не вижу никакого смысла разбирать, а что же там написано, я скорее хотел бы рассказать о своих мыслях и впечатлениях.
Я программирую уже более 7-ми лет, но &amp;ldquo;качественно копать в глубину&amp;rdquo; я решил совсем недавно. Именно поэтому создалось впечатление, что книга была нужна мне лет 5 назад, когда мне советовал ее одногруппник, а не теперь, когда большая часть идей из книги была получена мной от других людей или на личном опыте.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://alexandrv.ru/asserts/images/book_2.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вчера я закончил чтение книги, прочесть которую мне следовало довольно давно. Книга в IT среде популярна настолько, что я не вижу никакого смысла разбирать, а что же там написано, я скорее хотел бы рассказать о своих мыслях и впечатлениях.&lt;/p&gt;
&lt;p&gt;Я программирую уже более 7-ми лет, но &amp;ldquo;качественно копать в глубину&amp;rdquo; я решил совсем недавно. Именно поэтому создалось впечатление, что книга была нужна мне лет 5 назад, когда мне советовал ее одногруппник, а не теперь, когда большая часть идей из книги была получена мной от других людей или на личном опыте. Думаю, что вместо того, чтобы читать всю книгу целиком, я мог бы прочитать раздел &amp;ldquo;Запахи кода&amp;rdquo; (есть отличный сайт про них и чистый код) и ничего не потерять, но этот вариант подходит только тем, кто работал в командах с практиками код-ревью.&lt;/p&gt;
&lt;p&gt;Недавно в одном из чатов, где я сижу, прозвучало мнение о том, что книгу следует отправить в помойку. На мой вопрос &amp;ldquo;почему?&amp;rdquo; я ответа не получил, но вы получите от меня ответ о том, почему на мой взгляд этого делать не стоит. Думаю, что любой из вас, вне зависимости от взглядов на религию, согласится, что всякого рода заповеди вида &amp;ldquo;не укради&amp;rdquo; и &amp;ldquo;не убей&amp;rdquo; не несут в себе ничего плохого. К этой книге следует относиться также. Сама по себе она не несет ничего плохого и идеи в ней логичные и здравые, плохими они становятся при попадании в руки фанатиков, которые начинают гнаться за чистым кодом и чистой архитектурой вне контекста.&lt;/p&gt;
</turbo:content>
    </item>
    
  </channel>
</rss>