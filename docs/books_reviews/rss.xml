<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Обзоры книг on Ирокезнутый блог</title>
    <link>https://it-irokez.ru/books_reviews/</link>
    <description>Recent content in Обзоры книг on Ирокезнутый блог</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Sun, 25 Sep 2022 20:25:57 +0300</lastBuildDate><atom:link href="https://it-irokez.ru/books_reviews/rss.xml" rel="self" type="application/rss+xml" />
    <item turbo="true">
      <title>Обзор книги &#34;Как пасти котов. Наставление для программистов, руководящих другими программистами&#34; Д. Рейнвотер</title>
      <link>https://it-irokez.ru/books_reviews/how-to-herd-cats/</link>
      <pubDate>Fri, 06 Jan 2023 10:14:42 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/how-to-herd-cats/</guid>
      <description>О чем книга? Книга рассказывает о том, как вчерашнему разработчику, внезапно обнаружившему себя тимлидом в дне сегодняшнем, найти себя, найти общий язык с командой и своим начальством. Авторский стиль в большей степени напоминает разговор с опытным тимлидом в баре за чашечкой местного напитка, чем нравоучения о том, что хорошо, что плохо, а что уже завтра даст вам огромный профит и вообще поступать следует только так. Рейнвотер приводит в большом количестве примеры из жизни не забывая приправить их шуткой (не всегда удачной, но и книга не о стендап мастерстве).</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book7.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Книга рассказывает о том, как вчерашнему разработчику, внезапно обнаружившему себя тимлидом в дне сегодняшнем, найти себя, найти общий язык с командой и своим начальством. Авторский стиль в большей степени напоминает разговор с опытным тимлидом в баре за чашечкой местного напитка, чем нравоучения о том, что хорошо, что плохо, а что уже завтра даст вам огромный профит и вообще поступать следует только так. Рейнвотер приводит в большом количестве примеры из жизни не забывая приправить их шуткой (не всегда удачной, но и книга не о стендап мастерстве). Большое внимание уделяется ментальному состоянию новоиспеченного тимлида, регулярно напоминают ему о том, что круг его обязанностей изменился и результативность его работы заключается не только в написанном им коде, но и в коде, написанном его командой.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;p&gt;Приведу ряд цитат, которые нашел любопытными:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Хочу специально сообщить приверженцам технологии: бизнесмены — тоже умные люди. Под бизнесменами я подразумеваю тех, кто многие годы участвует в строительстве крупных корпораций и правительственных органов. Должен признать, что мне далеко не сразу удалось научиться уважать навыки, необходимые для ведения бизнеса. Я был интеллектуальным снобом, считавшим, что если кто то не понимает всех деталей технологии, то он по определению не может принадлежать к когорте ярчайших и лучших. Это было проявлением слабости. Вы можете многому научиться у руководителей в различных областях, не только связанных с технологией. Расширьте ваши интеллектуальные поиски, включив в них области деятельности, в большей степени связанные с применением не технологии.&amp;quot;(С)&lt;/li&gt;
&lt;li&gt;Список вопросов к самому себе, который позволит оценить себя и наметить пути развития:
&lt;ol&gt;
&lt;li&gt;Подвергаю ли я качество своего управления ежедневной оценке?&lt;/li&gt;
&lt;li&gt;Действительно ли я с каждым днем руковожу все лучше или я постоянно откладываю совершенствование стиля и сути моего управления на потом?&lt;/li&gt;
&lt;li&gt;Нравится ли мне то, что я делаю?&lt;/li&gt;
&lt;li&gt;Теряю ли я попусту время при выполнении своих служебных обязанностей?&lt;/li&gt;
&lt;li&gt;Оцениваю ли я свою производительность тем, сколько сделали мои подчинен ные под моим руководством, или у меня есть ощущение, что сам я не сделал ничего?&lt;/li&gt;
&lt;li&gt;Как мои слабости дали себя знать сегодня (по отношению ко мне самому или другим)?&lt;/li&gt;
&lt;li&gt;Чему я научился сегодня, чтобы оставаться в курсе, чтобы быть осведомленным, чтобы углубить и расширить свои знания?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&amp;ldquo;По большей части, разрастание рамок проекта происходит по причине недоработок специалистов, отвечающих за планирование&amp;rdquo; (С)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Степень эффективности и успеха ретроспективных совещаний обусловливается безопасностью сотрудников. Под безопасностью я имею в виду защищенность сотрудников от критики в рамках их группы. Лишь при таком условии они смогут обсуждать собственные результаты и даже признаваться в том, что поставленных целей можно было достичь по другому, более оптимальными способами — иначе говоря, учиться анализировать выполненные проекты. Без опасность необходимо культивировать и поддерживать. Несмотря на то, что, по большому счету, безопасность выражает ответственность всех участников ретроспективного совещания, его руководитель призван создавать условия для безопасности, следить за ее поддержанием и контролировать это ощущение. Чтобы сотрудник чувствовал себя в безопасности, он должен быть уверен, что за проявленную честность он не получит по ушам (например, не нарвется на отрицательную оценку во время следующего критического обзора). В ходе ретроспективного совещания не обойтись без постоянного и должным образом поощряемого взаимодоверия&amp;rdquo; (С)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Комментарии должны разъяснять, почему код написан именно так и никак иначе, и как этого удалось достичь — причем основной упор следует делать на раскрытии вопроса «почему?». О том как разработчик достиг поставленной задачи, свидетельствует сам код; в то же время комментарии помогают проследить ход мыслей разработчика во время разработки модуля.&amp;rdquo; (С)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Во всем, что вы делаете, необходимо соблюдать пять основных принципов лидерства.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Понимание&lt;/strong&gt;. Определитесь с тем, куда вы идете.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Передача знаний&lt;/strong&gt;. Делитесь своими знаниями — так, чтобы подчиненные все поняли.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Делегирование&lt;/strong&gt;. Общие задачи нужно решать общими усилиями.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Проверка&lt;/strong&gt;. Проверяйте свои действия и то, что делают ваши подчиненные в контексте достижения поставленных целей.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Участие&lt;/strong&gt;. Погружайтесь в работу с головой — будьте примером для остальных. Не забывайте о надстройке. Свое развитие основные принципы лидерства получают в следующих областях деятельности.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Наставничество&lt;/strong&gt;. Учите окружающих учить.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Вознаграждение&lt;/strong&gt;. Награждая сотрудников за выдающиеся результаты, вы сможете создать ситуацию, в которой одни успехи естественным образом выливаются в другие.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Исправление&lt;/strong&gt;. Помогая сотрудникам учиться на собственных ошибках, повышайте их квалификацию.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Предвидение&lt;/strong&gt;. Предугадывайте проблемы, пока они не ударили по вашей команде, — это станет хорошим стимулом для окружающих.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Адаптация&lt;/strong&gt;. Совершенствуйтесь, извлекая уроки из собственных ошибок.&amp;quot;(С)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Новоиспеченным тимлидам;&lt;/li&gt;
&lt;li&gt;Людям, нацеленным на вертикальный рост;&lt;/li&gt;
&lt;li&gt;Тем, кто в том или ином виде взаимодействует с командой разработки.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Одиноким волкам, которые работают сами по себе;&lt;/li&gt;
&lt;li&gt;Специалистам, которые решили сконцентрироваться на горизонтальном росте.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Как привыкнуть к роли руководителя.&lt;/li&gt;
&lt;li&gt;Как руководить собой.&lt;/li&gt;
&lt;li&gt;Как вести стаю за собой.&lt;/li&gt;
&lt;li&gt;Как организовать успех.&lt;/li&gt;
&lt;li&gt;Как вести совещания.&lt;/li&gt;
&lt;li&gt;Философия и методы технического лидера.&lt;/li&gt;
&lt;li&gt;Закат лидера.&lt;/li&gt;
&lt;li&gt;Восход лидера.&lt;/li&gt;
&lt;li&gt;Как ужиться с начальством.&lt;/li&gt;
&lt;li&gt;Слова без песни.&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Мистический человеко-месяц, или Как создаются программные системы&#34; Ф.Брукса</title>
      <link>https://it-irokez.ru/books_reviews/mythical_man-month/</link>
      <pubDate>Sun, 04 Dec 2022 08:54:17 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/mythical_man-month/</guid>
      <description>О чем книга? Весьма старая и, по мнению некоторых, &amp;ldquo;классическая&amp;rdquo; книга о программной инженерии. Искушенный читатель, уже знакомый с книгами о &amp;ldquo;мета разработке&amp;rdquo; (говоря точнее, об организации процесса разработки), едва ли сможет найти для себя в книге что-то новое. Во многом, это связано с тем, что подавляющее большинство современных авторов, затрагивающих темы организации разработки и проектирования систем, развивают идеи Ф. Брукса и честно на него ссылаются.
С другой стороны, читателя может оттолкнуть безнадежное моральное устаревание книги, и от этого не спасают даже добавленные в более поздних изданиях книги главы.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_6.png&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Весьма старая и, по мнению некоторых, &amp;ldquo;классическая&amp;rdquo; книга о программной инженерии. Искушенный читатель, уже знакомый с книгами о &amp;ldquo;мета разработке&amp;rdquo; (говоря точнее, об организации процесса разработки), едва ли сможет найти для себя в книге что-то новое. Во многом, это связано с тем, что подавляющее большинство современных авторов, затрагивающих темы организации разработки и проектирования систем, развивают идеи Ф. Брукса и честно на него ссылаются.&lt;/p&gt;
&lt;p&gt;С другой стороны, читателя может оттолкнуть безнадежное моральное устаревание книги, и от этого не спасают даже добавленные в более поздних изданиях книги главы. В чем это выражается? Автор большую часть книги приводит примеры из истории разработки OS360, не обходит стороной проблемы распределения времени использования мейнфреймов, важность наличия телефонной связи у менеджеров и на полном серьезе обсуждает методологию waterfall.&lt;/p&gt;
&lt;p&gt;Однако, вопреки всему вышеперечисленному, в книге можно отметить для себя некоторые моменты или задуматься над некоторыми мыслями автора.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Прогнозы времени, необходимого на завершение задачи, часто исходят из неверных суждений о структуре рабочего времени.&lt;/li&gt;
&lt;li&gt;Вероятнее всего, первую версию системы придется выкинуть (подобная мысль была у Ханта и Томаса в &amp;ldquo;Программист прагматик&amp;rdquo;, они продвигали идею прототипирования системы).&lt;/li&gt;
&lt;li&gt;Ф. Брукс продвигает идею нисходящего проектирования, а также идею о том, что для разработки всегда полезнее иметь работающую версию системы, пусть она даже и не будет делать какую-то полезную работу.&lt;/li&gt;
&lt;li&gt;Следует разделять данные о действиях и данные о состоянии дел и не вмешиваться в проблемы, которые могут решить ваши подчиненные.&lt;/li&gt;
&lt;li&gt;Для написания полезного текстового описания системы, модуля, чего угодно, Ф. Брукс предлагает следующий план:
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Назначение&lt;/em&gt;. Что является главной функцией?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Среда&lt;/em&gt;. Где это будет работать?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Область определения и область значений&lt;/em&gt;. Какие диапазоны допустимых значений входных и выходных данных?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Функции&lt;/em&gt;. Что может делать?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Форматы&lt;/em&gt; входных и выходных данных.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Инструкция по работе&lt;/em&gt;. Выглядит как-то рекурсивно :D&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Опции&lt;/em&gt;. Какой выбор предоставляется пользователю в отношении функций?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Время работы&lt;/em&gt;. Сколько времени занимает решение той или иной задачи при той или иной конфигурации.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Ф. Брукс активно продвигает идею генерирования документации из кода.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Вместо объяснения людям, что ООП является видом проектирования, и вооружения их принципами проектирования, их учили, что ООП &amp;ndash; это использования определенного инструмента.&amp;quot;(С) Д. Парнас.&lt;/li&gt;
&lt;li&gt;Важно определить, по меньшей мере, предположительные признаки группы пользователей системы.&lt;/li&gt;
&lt;li&gt;Программисты эффективнее всего работают, будучи ограждены от внутренностей чужих моделей.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Тем, кто хочет взглянуть на первоисточник идей, изложенных в книгах об организации разработки.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Тем, кто еще не читал других книг об организации процесса разработки;&lt;/li&gt;
&lt;li&gt;Вероятнее всего, будет бесполезно тем, кто уже читал &amp;ldquo;Чистую архитектуру&amp;rdquo;, &amp;ldquo;Программист прагматик&amp;rdquo; и другие подобные книги.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ГЛАВА 1. СМОЛЯНАЯ ЯМА&lt;/li&gt;
&lt;li&gt;ГЛАВА 2. ЭТОТ МИФИЧЕСКИЙ «ЧЕЛОВЕКО-МЕСЯЦ»&lt;/li&gt;
&lt;li&gt;ГЛАВА 3. ОПЕРАЦИОННАЯ БРИГАДА&lt;/li&gt;
&lt;li&gt;ГЛАВА 4. АРИСТОКРАТИЯ, ДЕМОКРАТИЯ И СИСТЕМНОЕ ПРОЕКТИРОВАНИЕ&lt;/li&gt;
&lt;li&gt;ГЛАВА 5. ЭФФЕКТ ВТОРОЙ СИСТЕМЫ&lt;/li&gt;
&lt;li&gt;ГЛАВА 6. ДОНЕСТИ СЛОВО&lt;/li&gt;
&lt;li&gt;ГЛАВА 7. ПОЧЕМУ НЕ УДАЛОСЬ ПОСТРОИТЬ ВАВИЛОНСКУЮ БАШНЮ?&lt;/li&gt;
&lt;li&gt;ГЛАВА 8. ОБЪЯВЛЯЯ УДАР&lt;/li&gt;
&lt;li&gt;ГЛАВА 9. ДВА В ОДНОМ&lt;/li&gt;
&lt;li&gt;ГЛАВА 10. ДОКУМЕНТАРНАЯ ГИПОТЕЗА&lt;/li&gt;
&lt;li&gt;ГЛАВА 11. ПЛАНИРУЙТЕ НА ВЫБРОС&lt;/li&gt;
&lt;li&gt;ГЛАВА 12. ОСТРЫЙ ИНСТРУМЕНТ&lt;/li&gt;
&lt;li&gt;ГЛАВА 13. ЦЕЛОЕ И ЧАСТИ&lt;/li&gt;
&lt;li&gt;ГЛАВА 14. НАЗРЕВАНИЕ КАТАСТРОФЫ&lt;/li&gt;
&lt;li&gt;ГЛАВА 15. ОБРАТНАЯ СТОРОНА&lt;/li&gt;
&lt;li&gt;ГЛАВА 16. СЕРЕБРЯНОЙ ПУЛИ НЕТ — СУЩНОСТЬ И АКЦИДЕНЦИЯ В ПРОГРАММНОЙ ИНЖЕНЕРИИ&lt;/li&gt;
&lt;li&gt;ГЛАВА 17. НОВЫЙ ВЫСТРЕЛ «СЕРЕБРЯНОЙ ПУЛИ НЕТ»&lt;/li&gt;
&lt;li&gt;ГЛАВА 18. ЗАЯВЛЕНИЯ «МИФИЧЕСКОГО ЧЕЛОВЕКО-МЕСЯЦА»: ПРАВДА ИЛИ ЛОЖЬ?&lt;/li&gt;
&lt;li&gt;ГЛАВА 19. «МИФИЧЕСКИЙ ЧЕЛОВЕКО-МЕСЯЦ» ДВАДЦАТЬ ЛЕТ СПУСТЯ&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Чистая Архитектура&#34; Р. Мартин</title>
      <link>https://it-irokez.ru/books_reviews/clear_architecture/</link>
      <pubDate>Fri, 18 Nov 2022 21:38:00 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/clear_architecture/</guid>
      <description>О чем книга? Книга посвящена, как следует из названия, вопросам построения чистой архитектуры и различных вопросов, лежащих в смежных областях. Отдельное внимание автор уделяет SOLID, тестируемости кода и месту тестов в архитектуре приложения. На фоне &amp;ldquo;чистого кода&amp;rdquo; книга выглядит гораздо менее категоричной и имеет достаточно примеров того, как чрезмерное увлечение &amp;ldquo;большим и правильным&amp;rdquo; способно погубить проект.
Что нашел полезным для себя? Возможность изменений ценнее работоспособности. Приложение, которое легко изменять, почти всегда можно привести к рабочему состоянию, но работающее приложение, которое трудно изменять, после внесения изменений будет тяжело привести обратно в рабочее состояние; Принцип единой ответственности в большей степени относится к акторам, чем к функциональному назначению класса.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/clear_architect.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Книга посвящена, как следует из названия, вопросам построения чистой архитектуры и различных вопросов, лежащих в смежных областях. Отдельное внимание автор уделяет SOLID, тестируемости кода и месту тестов в архитектуре приложения. На фоне &amp;ldquo;чистого кода&amp;rdquo; книга выглядит гораздо менее категоричной и имеет достаточно примеров того, как чрезмерное увлечение &amp;ldquo;большим и правильным&amp;rdquo; способно погубить проект.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Возможность изменений ценнее работоспособности. Приложение, которое легко изменять, почти всегда можно привести к рабочему состоянию, но работающее приложение, которое трудно изменять, после внесения изменений будет тяжело привести обратно в рабочее состояние;&lt;/li&gt;
&lt;li&gt;Принцип единой ответственности в большей степени относится к акторам, чем к функциональному назначению класса. Т.е. имеется в виду не причина, по которой должен меняться класс, а источник этих изменений;&lt;/li&gt;
&lt;li&gt;Нашел любопытной мысль о том, что разделение интерфейсов (ISP) &amp;ndash; это проблема языка, а не архитектуры.&lt;/li&gt;
&lt;li&gt;Понравились определения:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Бизнес-правило&lt;/strong&gt; &amp;ndash; действие, приносящее или экономящее деньги, не зависимо от того, выполняется ли оно вручную или автоматизированной системой.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Вариант использования&lt;/strong&gt; &amp;ndash; описывает, как и когда вызываются бизнес-правила в рамках автоматизированной системы.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Службы независимы на уровне отдельных переменных, но они, по меньшей мере, связаны общими данными.&lt;/li&gt;
&lt;li&gt;Приведенный ниже фрагмент из книги также напомнил мне &lt;a href=&#34;https://habr.com/ru/post/312022/&#34;&gt;одну старую статью с Хабра&lt;/a&gt; &lt;img src=&#34;https://it-irokez.ru/assets/images/clear_architect2.jpg&#34; alt=&#34;забавный фрагмент из книги&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Архитекторам (кто бы мог подумать?);&lt;/li&gt;
&lt;li&gt;Старшим разработчикам, принимающим архитектурные решения (как касательно архитектуры кода, так и касательно архитектуры приложения).&lt;/li&gt;
&lt;li&gt;Младшим разработчикам, желающим понять, почему старшие коллеги требуют от них строить код именно так, как они требуют (или чтобы найти аргументы против того, чтобы так делать).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Тем, для кого &amp;ldquo;чистая архитектура&amp;rdquo; &amp;ndash; это фабрика фабрик.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Что такое дизайн и архитектура?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Цель?&lt;/li&gt;
&lt;li&gt;Пример из практики&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;История о двух ценностях&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Поведение&lt;/li&gt;
&lt;li&gt;Архитектура&lt;/li&gt;
&lt;li&gt;Наибольшая ценность&lt;/li&gt;
&lt;li&gt;Матрица Эйзенхауэра&lt;/li&gt;
&lt;li&gt;Битва за архитектуру&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Обзор парадигм&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Структурное программирование&lt;/li&gt;
&lt;li&gt;Объектно-ориентированное программирование&lt;/li&gt;
&lt;li&gt;Функциональное программирование&lt;/li&gt;
&lt;li&gt;Пища для ума&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Структурное программирование&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Доказательство&lt;/li&gt;
&lt;li&gt;Объявление вредным&lt;/li&gt;
&lt;li&gt;Функциональная декомпозиция&lt;/li&gt;
&lt;li&gt;Формальные доказательства отсутствуют&lt;/li&gt;
&lt;li&gt;Наука во спасение&lt;/li&gt;
&lt;li&gt;Тестирование&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Объектно- ориентированное программирование&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Инкапсуляция?&lt;/li&gt;
&lt;li&gt;Наследование?&lt;/li&gt;
&lt;li&gt;Полиморфизм?&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Функциональное программирование&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Квадраты целых чисел&lt;/li&gt;
&lt;li&gt;Неизменяемость и архитектура&lt;/li&gt;
&lt;li&gt;Ограничение изменяемости&lt;/li&gt;
&lt;li&gt;Регистрация событий&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип единственной ответственности&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Признак 1: непреднамеренное дублирование&lt;/li&gt;
&lt;li&gt;Признак 2: слияния&lt;/li&gt;
&lt;li&gt;Решения&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип открытости/закрытости&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Мысленный эксперимент&lt;/li&gt;
&lt;li&gt;Управление направлением&lt;/li&gt;
&lt;li&gt;Сокрытие информации&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип подстановки Барбары Лисков&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Руководство по использованию наследования&lt;/li&gt;
&lt;li&gt;Проблема квадрат/прямоугольник&lt;/li&gt;
&lt;li&gt;LSP и архитектура&lt;/li&gt;
&lt;li&gt;Пример нарушения LSP&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип разделения интерфейсов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Принцип разделения интерфейсов и язык&lt;/li&gt;
&lt;li&gt;Принцип разделения интерфейсов и архитектура&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Принцип инверсии зависимости&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Стабильные абстракции&lt;/li&gt;
&lt;li&gt;Фабрики&lt;/li&gt;
&lt;li&gt;Конкретные компоненты&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Компоненты&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Краткая история компонентов&lt;/li&gt;
&lt;li&gt;Перемещаемость&lt;/li&gt;
&lt;li&gt;Компоновщики&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Связность компонентов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Принцип эквивалентности повторного использования и выпусков&lt;/li&gt;
&lt;li&gt;Принцип согласованного изменения&lt;/li&gt;
&lt;li&gt;Принцип совместного повторного использования&lt;/li&gt;
&lt;li&gt;Диаграмма противоречий для определения связности компонентов&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Сочетаемость компонентов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Принцип ацикличности зависимостей&lt;/li&gt;
&lt;li&gt;Проектирование сверху вниз&lt;/li&gt;
&lt;li&gt;Принцип устойчивых зависимостей&lt;/li&gt;
&lt;li&gt;Принцип устойчивости абстракций&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Что такое архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Разработка&lt;/li&gt;
&lt;li&gt;Развертывание&lt;/li&gt;
&lt;li&gt;Эффективность работы&lt;/li&gt;
&lt;li&gt;Сопровождение&lt;/li&gt;
&lt;li&gt;Сохранение разнообразия вариантов&lt;/li&gt;
&lt;li&gt;Независимость от устройства&lt;/li&gt;
&lt;li&gt;Нежелательная почта&lt;/li&gt;
&lt;li&gt;Физическая адресация&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Независимость&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Варианты использования&lt;/li&gt;
&lt;li&gt;Эффективность работы&lt;/li&gt;
&lt;li&gt;Разработка&lt;/li&gt;
&lt;li&gt;Развертывание&lt;/li&gt;
&lt;li&gt;Сохранение разнообразия вариантов&lt;/li&gt;
&lt;li&gt;Разделение уровней&lt;/li&gt;
&lt;li&gt;Разделение вариантов использования&lt;/li&gt;
&lt;li&gt;Режим разделения&lt;/li&gt;
&lt;li&gt;Возможность независимой разработки&lt;/li&gt;
&lt;li&gt;Возможность независимого развертывания&lt;/li&gt;
&lt;li&gt;Дублирование&lt;/li&gt;
&lt;li&gt;Режимы разделения (еще раз)&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Границы: проведение разделяющих линий&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Пара печальных историй&lt;/li&gt;
&lt;li&gt;FitNesse&lt;/li&gt;
&lt;li&gt;Какие границы проводить и когда?&lt;/li&gt;
&lt;li&gt;О вводе и выводе&lt;/li&gt;
&lt;li&gt;Архитектура с плагинами&lt;/li&gt;
&lt;li&gt;Аргумент в пользу плагинов&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Анатомия границ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Пересечение границ&lt;/li&gt;
&lt;li&gt;Ужасный монолит&lt;/li&gt;
&lt;li&gt;Компоненты развертывания&lt;/li&gt;
&lt;li&gt;Потоки выполнения&lt;/li&gt;
&lt;li&gt;Локальные процессы&lt;/li&gt;
&lt;li&gt;Службы&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Политика и уровень&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Уровень&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Бизнес-правила&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Сущности&lt;/li&gt;
&lt;li&gt;Варианты использования&lt;/li&gt;
&lt;li&gt;Модели запросов и ответов&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Кричащая архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тема архитектуры&lt;/li&gt;
&lt;li&gt;Цель архитектуры&lt;/li&gt;
&lt;li&gt;А что насчет Веб?&lt;/li&gt;
&lt;li&gt;Фреймворки — это инструменты, а не образ жизни&lt;/li&gt;
&lt;li&gt;Тестируемые архитектуры&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чистая архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Правило зависимостей&lt;/li&gt;
&lt;li&gt;Типичный сценарий&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Презентаторы и скромные объекты&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Шаблон «Скромный объект»&lt;/li&gt;
&lt;li&gt;Презентаторы и представления&lt;/li&gt;
&lt;li&gt;Тестирование и архитектура&lt;/li&gt;
&lt;li&gt;Шлюзы к базам данных&lt;/li&gt;
&lt;li&gt;Преобразователи данных&lt;/li&gt;
&lt;li&gt;Службы&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Неполные границы&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Пропустить последний шаг&lt;/li&gt;
&lt;li&gt;Одномерные границы&lt;/li&gt;
&lt;li&gt;Фасады&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Уровни и границы&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Охота на Вампуса&lt;/li&gt;
&lt;li&gt;Чистая архитектура?&lt;/li&gt;
&lt;li&gt;Пересечение потоков&lt;/li&gt;
&lt;li&gt;Разбиение потоков&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Главный компонент&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Конечная деталь&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Службы: большие и малые&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Сервисная архитектура?&lt;/li&gt;
&lt;li&gt;Преимущества служб?&lt;/li&gt;
&lt;li&gt;Проблема с животными&lt;/li&gt;
&lt;li&gt;Спасение в объектах&lt;/li&gt;
&lt;li&gt;Службы на основе компонентов&lt;/li&gt;
&lt;li&gt;Сквозные задачи&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Границы тестов&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тесты как компоненты системы&lt;/li&gt;
&lt;li&gt;Проектирование для простоты тестирования&lt;/li&gt;
&lt;li&gt;Программный интерфейс для тестирования&lt;/li&gt;
&lt;li&gt;Безопасность&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Чистая встраиваемая архитектура&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Тест на профпригодность&lt;/li&gt;
&lt;li&gt;Привязка к оборудованию — узкое место&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;База данных — это деталь&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Реляционные базы данных&lt;/li&gt;
&lt;li&gt;Почему системы баз данных настолько распространены?&lt;/li&gt;
&lt;li&gt;Сохранятся ли диски?&lt;/li&gt;
&lt;li&gt;Детали&lt;/li&gt;
&lt;li&gt;А производительность?&lt;/li&gt;
&lt;li&gt;История&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Веб — это деталь&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Бесконечный маятник&lt;/li&gt;
&lt;li&gt;Вывод&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Фреймворки — это деталь&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Авторы фреймворков&lt;/li&gt;
&lt;li&gt;Неравный брак&lt;/li&gt;
&lt;li&gt;Риски&lt;/li&gt;
&lt;li&gt;Решение&lt;/li&gt;
&lt;li&gt;Объявляю вас&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Практический пример: продажа видео&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Продукт&lt;/li&gt;
&lt;li&gt;Анализ вариантов использования&lt;/li&gt;
&lt;li&gt;Компонентная архитектура&lt;/li&gt;
&lt;li&gt;Управление зависимостями&lt;/li&gt;
&lt;li&gt;Заключение&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Недостающая глава&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Упаковка по уровням&lt;/li&gt;
&lt;li&gt;Упаковка по особенностям&lt;/li&gt;
&lt;li&gt;Порты и адаптеры&lt;/li&gt;
&lt;li&gt;Упаковка по компонентам&lt;/li&gt;
&lt;li&gt;Дьявол в деталях реализации&lt;/li&gt;
&lt;li&gt;Организация и инкапсуляция&lt;/li&gt;
&lt;li&gt;Другие режимы разделения&lt;/li&gt;
&lt;li&gt;Заключение: недостающий совет&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Программист прагматик&#34;. Э. Хант, Д. Томас.</title>
      <link>https://it-irokez.ru/books_reviews/pragmatic-programmer/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/pragmatic-programmer/</guid>
      <description>О чем книга? Книга представляет собой набор советов от программистов с многолетним стажем. Авторы попытались создать книгу для программистов, советы из которой будут полезны в не зависимости от языка программирования и стека в целом. Авторы, помимо технических вопросов, не обходят также и стороной вопросы социального взаимодействия и в целом организации командной работы. Так же авторы не забывают напомнить, что хороший программист должен постоянно развиваться, совершенствовать и оттачивать свои навыки.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/pragmaticprogrammer.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Книга представляет собой набор советов от программистов с многолетним стажем. Авторы попытались создать книгу для программистов, советы из которой будут полезны в не зависимости от языка программирования и стека в целом. Авторы, помимо технических вопросов, не обходят также и стороной вопросы социального взаимодействия и в целом организации командной работы. Так же авторы не забывают напомнить, что хороший программист должен постоянно развиваться, совершенствовать и оттачивать свои навыки.&lt;/p&gt;
&lt;p&gt;Главную мысль, идущая через всю книгу, можно выразить следующими словами: &amp;ldquo;как получать максимальный результат, прикладывая минимум усилий&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Наиболее занимательной мне показалась мысль про оттачивание навыка владения инструментом (IDE). На заре своего становления программистом я часто пренебрегал этим навыком и не относился к нему достаточно серьезно, но в действительности, высокий уровень владения IDE способен ускорить разработку и в целом положительно сказаться на качестве кода.&lt;/li&gt;
&lt;li&gt;Лишний раз напомнил себе про важность автоматизации и различных автогенераций. Автоматическая генерация документации, спецификаций и кода способна сэкономить большое количество времени (однако, как и любую другую идею, ни что не нужно возводить в абсолют).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Тем, кто только собирается профессионально заняться разработкой;&lt;/li&gt;
&lt;li&gt;Стажерам и junior программистам.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Опытным разработчикам, которые уже уверено чувствуют себя в индустрии.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Глава 1 Прагматическая философия&lt;/li&gt;
&lt;li&gt;Глава 2 Прагматический подход&lt;/li&gt;
&lt;li&gt;Глава 3 Походный набор инструментов&lt;/li&gt;
&lt;li&gt;Глава 4 Прагматическая паранойя&lt;/li&gt;
&lt;li&gt;Глава 5 Гибкость против хрупкости&lt;/li&gt;
&lt;li&gt;Глава 6 Пока вы пишете программу&lt;/li&gt;
&lt;li&gt;Глава 7 Перед тем, как начать проект&lt;/li&gt;
&lt;li&gt;Глава 8 Прагматические проекты&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Управление памятью в .net для профессионалов&#34;. К. Кокоса</title>
      <link>https://it-irokez.ru/books_reviews/dotnet-memmory-for-professional/</link>
      <pubDate>Tue, 27 Sep 2022 08:22:13 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/dotnet-memmory-for-professional/</guid>
      <description>О чем книга? Отличная книга, которая позволит углубить знания о внутреннем устройстве платформы .net, в особенности о том, как в платформе происходит управление памятью (что прямо следует из названия).
В книге много примеров кода, демонстрирующих те или иные способы взаимодействия с платформой и приемы, которые позволят писать высокопроизводительные приложения и оптимизировать потребление памяти. Помимо этого есть конкретные способы выявления проблем с памятью и предложения по их устранению. Те, кого мало интересует написание высокопроизводительных приложений, а больше интересуются внутренним устройством платформы и сборщика мусора могут смело пропускать описанные выше разделы.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/dotnetmemmoorypanagment.jpg&#34; alt=&#34;Обложка книги&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;о-чем-книга&#34;&gt;О чем книга?&lt;/h2&gt;
&lt;p&gt;Отличная книга, которая позволит углубить знания о внутреннем устройстве платформы .net, в особенности о том, как в платформе происходит управление памятью (что прямо следует из названия).&lt;/p&gt;
&lt;p&gt;В книге много примеров кода, демонстрирующих те или иные способы взаимодействия с платформой и приемы, которые позволят писать высокопроизводительные приложения и оптимизировать потребление памяти. Помимо этого есть конкретные способы выявления проблем с памятью и предложения по их устранению. Те, кого мало интересует написание высокопроизводительных приложений, а больше интересуются внутренним устройством платформы и сборщика мусора могут смело пропускать описанные выше разделы. Кроме того, книга в целом допускает непоследовательное чтение, но из-за большого количества ссылок на предыдущие главы, есть шанс не получить полный контекст главы.&lt;/p&gt;
&lt;p&gt;В последней главе разбираются инструменты, которые могут быть полезны при реализации собственных анализаторов потребления памяти в управляемом коде платформы и даже рассказывается о том, каким способом можно реализовать собственный garbage collector, если у вас вдруг возникнет такая необходимость.&lt;/p&gt;
&lt;h2 id=&#34;что-нашел-полезным-для-себя&#34;&gt;Что нашел полезным для себя?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Книга позволила понять устройство GC на достаточном уровне, чтобы вопрос с собеседований &amp;ldquo;Расскажите как работает garbage collector&amp;rdquo; перестал вызывать всякое беспокойство;&lt;/li&gt;
&lt;li&gt;Отметил для себя приятные практики работы со &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, в частности, про приемы программирования без аллокаций на куче и эффективную работу со срезами;&lt;/li&gt;
&lt;li&gt;Узнал про ссылочные структуры и про возможность сделать ссылку на отдельные поля класса или даже индексы массива.&lt;/li&gt;
&lt;li&gt;Научился говорить &amp;ldquo;тип с семантикой передачи по ссылке или по значению&amp;rdquo; вместо &amp;ldquo;ссылочный или значимый тип&amp;rdquo; :D&lt;/li&gt;
&lt;li&gt;Узнал, что когда вы пишите высокоэффективный, но не поддерживаемый и не читаемый код, то это называется: &amp;ldquo;Data oriented programming&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-подойдет&#34;&gt;Кому подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Опытным разработчикам на платформе .net, которые хотят внутреннее устройство платформы и GC (garbage collector) в частности;&lt;/li&gt;
&lt;li&gt;Разработчикам требовательных к производительности и потреблению памяти приложений.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;кому-не-подойдет&#34;&gt;Кому не подойдет?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Новичкам, которые только начинают изучать платформу.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;оглавление&#34;&gt;Оглавление&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Глава 1. Основные понятия&lt;/li&gt;
&lt;li&gt;Глава 2. Низкоуровневое управление памятью&lt;/li&gt;
&lt;li&gt;Глава 3. Измерения памяти&lt;/li&gt;
&lt;li&gt;Глава 4. Фундаментальные основы .NET&lt;/li&gt;
&lt;li&gt;Глава 5. Разделение памяти на части&lt;/li&gt;
&lt;li&gt;Глава 6. Выделение памяти&lt;/li&gt;
&lt;li&gt;Глава 7. Сборка мусора – введение&lt;/li&gt;
&lt;li&gt;Глава 8. Сборка мусора – этап пометки&lt;/li&gt;
&lt;li&gt;Глава 9. Сборка мусора – этап планирования&lt;/li&gt;
&lt;li&gt;Глава 10. Сборка мусора – очистка и уплотнение&lt;/li&gt;
&lt;li&gt;Глава 11. Варианты сборки мусора&lt;/li&gt;
&lt;li&gt;Глава 12. Время жизни объекта&lt;/li&gt;
&lt;li&gt;Глава 13. Разное&lt;/li&gt;
&lt;li&gt;Глава 14. Продвинутые приемы&lt;/li&gt;
&lt;li&gt;Глава 15. Интерфейсы прикладного программирования (API)&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;ASP.NET Core in Action&#34;. А. Лок</title>
      <link>https://it-irokez.ru/books_reviews/aspnetcoreinaction/</link>
      <pubDate>Mon, 21 Mar 2022 09:48:11 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/aspnetcoreinaction/</guid>
      <description>И так, я дочитал ASP.NET Core in Action за авторством Андрю Лока. Книга посвящена работе с asp.net core версии 5.0. Версия уже не самая свежая, однако это нисколько не умоляет важность и нужность этой книги.
Как вы уже могли догадаться, книга мне понравилась. К моменту, как я начал читать книгу, у меня уже был опыт работы с asp.net core приложениями, и я даже успел поработать с Blazor-ом, по этому брал я ее в надежде добрать базовые знания, которые, как мы все знаем, легко недобрать если сразу погружаешься в практическую разработку.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_4.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;И так, я дочитал ASP.NET Core in Action за авторством Андрю Лока. Книга посвящена работе с asp.net core версии 5.0. Версия уже не самая свежая, однако это нисколько не умоляет важность и нужность этой книги.&lt;/p&gt;
&lt;p&gt;Как вы уже могли догадаться, книга мне понравилась. К моменту, как я начал читать книгу, у меня уже был опыт работы с asp.net core приложениями, и я даже успел поработать с Blazor-ом, по этому брал я ее в надежде добрать базовые знания, которые, как мы все знаем, легко недобрать если сразу погружаешься в практическую разработку. И я не прогадал. Книга дала мне именно то, на что я и рассчитывал – базовое понимание принципов работы и конфигурирования asp.net core приложений, объяснила особенности различия MVC и Razor pages подходов, научила работать с middleware и filter пайплайнами и проводить интеграционное тестирование всего приложения или же просто запускать его в памяти, чтобы иметь возможность протестировать работу мидлвари. В книги большое количество прикладных примеров и отдельно мое сердечко погрел тот факт, что автор уделяет внимание безопасности приложения, рассказывает о best practice и причинах, по которым они стали таковыми.&lt;/p&gt;
&lt;p&gt;Если вы новичок, который уже разобрался в том, как программировать на C# и теперь хотите качественно вкатиться в веб разработку, то эта книга – это то что вам нужно. Если же вы, как и я, уже успели вкусить разработки под asp.net core, но пропустили базовый этап обучения, то тоже настоятельно рекомендую почитать эту книгу. Читать ее целиком смысла не будет, но отдельные подглавы зацепят ваш взгляд сами по себе, в этом я уверен.&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Конкурентность в C#&#34;. С Клири</title>
      <link>https://it-irokez.ru/books_reviews/concurency/</link>
      <pubDate>Wed, 12 Jan 2022 09:44:02 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/concurency/</guid>
      <description>Если коротко &amp;ndash; книга показалась мне полезной. А теперь развернуто :D.
Начну с того, что мне в книге понравилось и что доставило мне удовольствие. Во-первых, я научился нормально использовать async/await и писать асинхронные методы (или методы поддерживающие ожидание). Во-вторых, я научился делать многопоточность с помощью PLINQ, использовать конкурентные множества и знаю зачем нужны иммутабельные (неизменяемые) множества. В-третьих, узнал об реактивном и dataflow подходах. Dataflow настолько меня впечатлил, что я даже решил утащить его в проект на работе.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_3.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Если коротко &amp;ndash; книга показалась мне полезной.
А теперь развернуто :D.&lt;/p&gt;
&lt;p&gt;Начну с того, что мне в книге понравилось и что доставило мне удовольствие. Во-первых, я научился нормально использовать async/await и писать асинхронные методы (или методы поддерживающие ожидание). Во-вторых, я научился делать многопоточность с помощью PLINQ, использовать конкурентные множества и знаю зачем нужны иммутабельные (неизменяемые) множества. В-третьих, узнал об реактивном и dataflow подходах. Dataflow настолько меня впечатлил, что я даже решил утащить его в проект на работе.&lt;/p&gt;
&lt;p&gt;Что мне в книге не понравилось:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Авторский стиль&lt;/strong&gt;.  Манера повествования автора скачет от &amp;ldquo;вы впервые увидели async&amp;rdquo; до &amp;ldquo;вам необходимо сохранить контекст потока&amp;rdquo;. Автор так и не смог определиться, пишет ли он сборник рецептов для тех, кто уже видел конкурентный код и сталкивался с его последствиями (чем на мой взгляд и является эта книга) или же попытка научить использовать конкурентность тех, кто с ней не сталкивался.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Структура книги&lt;/strong&gt;. У меня при чтении сложилось впечатление, что главы книги словно бы идут в не правильном порядке. Вероятнее всего это чисто субъективное мнение, но тем не менее.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Мало реальных примеров&lt;/strong&gt;. В книге действительно мало примеров, которые были бы введены не для наглядности, а для демонстрации мощности приведенных методов и подходов.&lt;/li&gt;
&lt;/ul&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Head First Паттерны проектирования&#34;. Эрика и Элизабет Фримен</title>
      <link>https://it-irokez.ru/books_reviews/head_first_patterns/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/head_first_patterns/</guid>
      <description>Еще одна книга, которую мне следовало прочитать довольно давно (Хотя бы потому что книга издания 2013-го года столько лет лежит у меня на полке). Возможно даже раньше, чем &amp;ldquo;Чистый код&amp;rdquo; Мартина. В книге на простых и понятных примерах из жизни выдуманного города &amp;ldquo;Объектвиля&amp;rdquo; разбирает паттерны:
Стратегия; Наблюдатель; Декоратор; Фабрика; Одиночка; Команда; Адаптер; Фасад; Шаблонный метод; Итератор; Компоновщик; Состояние; Заместитель. Примеры в книге написаны на столь горячо любимой фанатами ООП Java, но специфичных именно для Java примеров в книге не так много.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_1.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Еще одна книга, которую мне следовало прочитать довольно давно (Хотя бы потому что книга издания 2013-го года столько лет лежит у меня на полке). Возможно даже раньше, чем &amp;ldquo;Чистый код&amp;rdquo; Мартина. В книге на простых и понятных примерах из жизни выдуманного города &amp;ldquo;Объектвиля&amp;rdquo; разбирает паттерны:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Стратегия;&lt;/li&gt;
&lt;li&gt;Наблюдатель;&lt;/li&gt;
&lt;li&gt;Декоратор;&lt;/li&gt;
&lt;li&gt;Фабрика;&lt;/li&gt;
&lt;li&gt;Одиночка;&lt;/li&gt;
&lt;li&gt;Команда;&lt;/li&gt;
&lt;li&gt;Адаптер;&lt;/li&gt;
&lt;li&gt;Фасад;&lt;/li&gt;
&lt;li&gt;Шаблонный метод;&lt;/li&gt;
&lt;li&gt;Итератор;&lt;/li&gt;
&lt;li&gt;Компоновщик;&lt;/li&gt;
&lt;li&gt;Состояние;&lt;/li&gt;
&lt;li&gt;Заместитель.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Примеры в книге написаны на столь горячо любимой фанатами ООП Java, но специфичных именно для Java примеров в книге не так много.
Помимо того, что авторы рассказывают о том, как использовать тот или иной паттерн и как его реализовать, большое внимание уделяется ОО-проектированию как таковому. Из главы в главу перекочевывает постепенно расширяющийся список принципов ОО-проектирования. Именно для того, чтобы в дальнейшем лучше усвоить эти принципы я бы рекомендовал читать эту книгу ПЕРЕД чистым кодом.
В конце книги один из разделов главы посвящен тому, что использование паттернов не решит все ваши проблемы и что не нужно проектировать систему под паттерны. Они должны вписываться в систему органично и желательно не насильственно :D&lt;/p&gt;
</turbo:content>
    </item>
    
    <item turbo="true">
      <title>Обзор книги &#34;Чистый код&#34;. Р. Мартин</title>
      <link>https://it-irokez.ru/books_reviews/clear_code/</link>
      <pubDate>Sun, 05 Dec 2021 08:40:14 +0300</pubDate>
      
      <guid>https://it-irokez.ru/books_reviews/clear_code/</guid>
      <description>Вчера я закончил чтение книги, прочесть которую мне следовало довольно давно. Книга в IT среде популярна настолько, что я не вижу никакого смысла разбирать, а что же там написано, я скорее хотел бы рассказать о своих мыслях и впечатлениях.
Я программирую уже более 7-ми лет, но &amp;ldquo;качественно копать в глубину&amp;rdquo; я решил совсем недавно. Именно поэтому создалось впечатление, что книга была нужна мне лет 5 назад, когда мне советовал ее одногруппник, а не теперь, когда большая часть идей из книги была получена мной от других людей или на личном опыте.</description>
      <turbo:content>&lt;p&gt;&lt;img src=&#34;https://it-irokez.ru/assets/images/book_2.png&#34; alt=&#34;обложка книги&#34;&gt;&lt;/p&gt;
&lt;p&gt;Вчера я закончил чтение книги, прочесть которую мне следовало довольно давно. Книга в IT среде популярна настолько, что я не вижу никакого смысла разбирать, а что же там написано, я скорее хотел бы рассказать о своих мыслях и впечатлениях.&lt;/p&gt;
&lt;p&gt;Я программирую уже более 7-ми лет, но &amp;ldquo;качественно копать в глубину&amp;rdquo; я решил совсем недавно. Именно поэтому создалось впечатление, что книга была нужна мне лет 5 назад, когда мне советовал ее одногруппник, а не теперь, когда большая часть идей из книги была получена мной от других людей или на личном опыте. Думаю, что вместо того, чтобы читать всю книгу целиком, я мог бы прочитать раздел &amp;ldquo;Запахи кода&amp;rdquo; (есть отличный сайт про них и чистый код) и ничего не потерять, но этот вариант подходит только тем, кто работал в командах с практиками код-ревью.&lt;/p&gt;
&lt;p&gt;Недавно в одном из чатов, где я сижу, прозвучало мнение о том, что книгу следует отправить в помойку. На мой вопрос &amp;ldquo;почему?&amp;rdquo; я ответа не получил, но вы получите от меня ответ о том, почему на мой взгляд этого делать не стоит. Думаю, что любой из вас, вне зависимости от взглядов на религию, согласится, что всякого рода заповеди вида &amp;ldquo;не укради&amp;rdquo; и &amp;ldquo;не убей&amp;rdquo; не несут в себе ничего плохого. К этой книге следует относиться также. Сама по себе она не несет ничего плохого и идеи в ней логичные и здравые, плохими они становятся при попадании в руки фанатиков, которые начинают гнаться за чистым кодом и чистой архитектурой вне контекста.&lt;/p&gt;
</turbo:content>
    </item>
    
  </channel>
</rss>